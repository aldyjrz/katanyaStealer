local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RE = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RE/ObtainedNewFishNotification"]

local newId = 226
local spoofWeight = 999999

local function patchargs(id, weightData, itemData, flag)
    id = newId
    if type(weightData) == "table" and type(weightData.Weight) == "number" then
        weightData.Weight = spoofWeight
    end
    if type(itemData) == "table" then
        itemData.ItemId = newId
        local inv = itemData.InventoryItem
        if inv then
            inv.Id = newId
            local meta = inv.Metadata
            if meta and type(meta.Weight) == "number" then
                meta.Weight = spoofWeight
            end
        end
    end
    return id, weightData, itemData, flag
end

for , conn in ipairs(getconnections(RE.OnClientEvent)) do
    local original = conn.Function
    if conn.Disconnect then conn:Disconnect() end
    RE.OnClientEvent:Connect(function(...)
        original(patch_args(...))
    end)
end

local raw_connect = RBXScriptSignal and getrawmetatable(RBXScriptSignal).index.Connect or nil
if raw_connect and hookfunction then
    local mt = getrawmetatable(RE.OnClientEvent)
    local old_index = mt.index
    setreadonly(mt, false)
    mt.__index = function(obj, key)
        local v = old_index(obj, key)
        if obj == RE.OnClientEvent and key == "Connect" and type(v) == "function" then
            return function(signal, fn)
                return v(signal, function(...)
                    fn(patch_args(...))
                end)
            end
        end
        return v
    end
    setreadonly(mt, true)
end