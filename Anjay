local AldyToiM2 = {
		"\121\090\078\115\119\075\112\047\114\077\061\061",
		"\107\103\048\102\056\075\080\053\100\084\112\070\073\113\102\068\056\053\061\061",
		"\100\115\110\078\048\115\102\102\056\113\107\110\056\115\110\108\056\113\112\074",
		"\100\084\047\066\114\077\061\061",
		"\119\103\107\102\056\103\079\061",
		"\104\050\122\066\048\084\102\099\109\090\057\104\073\113\052\111",
		"\114\115\112\115\114\115\112\086\121\067\102\099\073\115\112\099\073\113\052\098\106\080\061\061",
		"\107\113\112\115\109\103\112\088\073\069\097\053\079\086\077\061",
		"\119\113\110\098\048\084\067\061",
		"\107\084\051\068\114\050\080\053\112\084\052\098\056\080\061\061",
		"\114\115\073\108\109\119\053\057\117\076\111\053\079\104\080\088\043\069\067\084\105\076\077\111\105\070\079\118\087\080\061\061",
		"\043\067\117\068\121\090\078\086",
		"\114\084\112\088\048\090\117\120\048\090\107\103\048\090\110\120\121\113\112\098\114\111\061\061",
		"\100\050\054\102\109\084\102\051\056\067\101\102\114\084\053\061",
		"\100\074\109\068\100\072\112\098\109\084\051\051\114\084\112\103\048\090\110\120\121\113\112\098\107\103\048\102\056\075\080\061",
		"\087\080\061\061",
		"\100\084\112\088\048\090\117\120\043\110\107\051\114\115\073\102\073\077\061\061",
		"\080\090\078\070\121\113\052\098\048\090\080\061",
		"\073\084\112\108\121\113\052\068\121\101\107\066\048\103\043\061",
		"\080\115\057\101\114\074\112\115\048\115\112\070\073\077\061\061",
		"\100\115\112\086\121\103\066\051\109\115\057\102",
		"\107\115\102\099\048\076\054\117\048\080\061\061",
		"\080\090\057\086\056\120\101\068\073\115\112\117\056\050\112\086\048\080\061\061",
		"\118\066\089\053\071\071\108\116\043\067\112\098\114\115\052\098\043\072\117\051\109\103\080\053\048\090\078\070\121\113\110\099\073\076\118\053\119\113\112\099\073\113\102\049\109\090\118\099",
		"\114\113\112\098\048\115\112\070\073\067\117\051\114\050\080\061",
		"\114\113\057\051\109\084\112\122\048\069\120\097\122\090\080\049\087\080\061\061",
		"\112\090\078\110\114\103\112\066\114\110\107\068\056\084\111\061",
		"\080\103\112\120\056\098\054\119\056\084\057\088\043\067\112\099\109\084\051\051\056\075\080\061",
		"\056\113\110\086\073\110\117\102\056\115\080\061",
		"\118\066\098\110\043\067\112\099\109\084\051\051\056\075\080\053\048\113\102\111\121\090\057\066\121\069\097\053",
		"\107\103\122\098\056\050\043\055\043\113\117\051\056\108\073\120\043\113\048\066\056\115\080\053\073\113\110\098\048\084\112\120\043\072\054\068\114\084\102\120\121\090\052\099\105\053\061\061",
		"\083\122\065\079\074\076\054\104\048\103\122\084\048\103\043\053\119\090\078\115\056\111\061\061",
		"\100\113\110\098\048\090\078\120",
		"\107\103\122\098\056\050\043\055\043\067\048\051\121\090\057\102\048\076\054\120\056\098\054\088\056\084\110\074\043\113\101\068\048\072\112\088\048\103\079\099\043\110\054\088\048\090\110\086\048\119\054\050\109\090\102\120\043\113\110\099\048\076\054\120\114\075\074\053\109\090\073\051\121\090\118\099",
		"\080\090\057\074\106\112\107\068\121\080\061\061",
		"\112\113\102\120\056\113\100\061",
		"\104\090\102\074\056\115\102\075\121\072\080\053\100\115\052\074",
		"\100\084\117\098\048\090\112\099\107\050\112\066",
		"\080\075\112\078\043\110\073\102\109\103\107\097\048\103\043\061",
		"\100\074\109\068\119\090\078\066\073\113\102\051\073\113\112\100\114\115\110\074\048\080\061\061",
		"\100\084\112\098\073\115\112\098\043\113\057\066\056\115\088\053\109\084\052\111\121\090\112\074\043\072\107\068\043\113\117\088\121\103\054\108\056\084\110\098\048\076\118\061",
		"\080\103\112\120\056\098\054\113\109\103\122\047",
		"\100\084\112\088\048\090\117\120\043\067\117\051\114\050\080\061",
		"\112\103\117\102\114\074\102\099\114\072\112\120\100\084\112\098\073\115\102\070\048\080\061\061",
		"\104\102\054\069\043\113\078\068\073\076\054\115\056\050\112\099\048\076\118\061",
		"\100\115\110\074\121\090\110\099\073\077\061\061",
		"\048\113\112\088\109\103\074\061",
		"\080\084\057\066\109\084\047\067\048\090\057\051\106\080\061\061",
		"\100\072\122\066\056\090\110\098\106\080\061\061",
		"\114\084\112\088\048\090\117\120\048\090\107\080\056\113\110\078\048\103\122\122\048\077\061\061",
		"\100\084\112\088\048\090\117\120\043\067\048\066\114\084\053\053\048\075\122\068\056\119\054\076\109\090\117\049\114\113\110\070\121\111\061\061",
		"\100\113\110\070\121\084\110\075\048\103\079\061",
		"\107\103\122\098\056\050\043\061",
		"\080\103\112\120\056\084\101\051\073\113\102\070\109\090\057\088\106\119\054\086\048\090\057\088\043\113\048\066\114\084\053\053\109\115\110\086\048\090\080\053\056\084\118\053\073\113\051\102\043\113\117\051\073\113\117\097\043\072\107\097\114\115\112\086\121\113\052\088\048\077\061\061",
		"\109\115\110\075\100\084\102\055\048\080\061\061",
		"\107\103\110\101\121\103\054\111\048\090\107\104\121\084\102\099\112\112\112\122\107\077\061\061",
		"\104\072\112\070\121\050\074\053\100\115\052\074",
		"\080\090\057\088\043\067\048\066\114\084\053\053\121\113\110\084\048\119\054\108\048\090\112\099\043\072\117\068\056\113\080\099",
		"\056\115\112\120",
		"\122\119\053\097\105\108\088\066\122\119\074\061",
		"\100\072\122\068\056\103\054\120",
		"\048\115\057\068\056\050\043\061",
		"\080\090\057\074\121\119\054\080\114\115\110\099\109\103\107\051",
		"\083\122\065\056\074\108\054\054\073\103\107\068\043\110\117\102\056\113\111\053\080\084\110\101\048\084\051\120\043\067\048\066\114\084\053\061",
		"\100\115\112\086\114\113\110\050\056\108\054\082\056\050\114\061",
		"\100\072\122\066\109\084\100\061",
		"\112\115\102\086\121\090\122\088\048\080\061\061",
		"\076\102\122\068\056\113\111\053\080\084\052\047\114\113\057\102\073\113\112\074\105\053\061\061",
		"\112\113\110\098\048\084\112\120\043\072\054\088\109\103\102\102\114\108\054\099\056\050\080\053\048\115\052\101\056\115\080\053\056\050\043\053\121\090\078\084\109\090\057\066\048\076\118\061",
		"\100\120\112\069\100\074\112\100",
		"\080\090\057\074\106\112\107\068\121\100\107\051\114\115\088\061",
		"\104\050\112\120",
		"\104\113\102\099\121\098\054\108\048\090\057\101\056\119\054\074\121\119\054\066\056\075\054\101\073\077\061\061",
		"\048\115\102\088\073\113\112\098\112\090\078\115\109\103\048\068\114\115\102\120\048\090\080\061",
		"\079\104\077\061",
		"\100\113\112\098\048\115\112\070\073\077\061\061",
		"\112\103\117\102\114\074\102\074",
		"\104\090\112\075\109\090\057\068\048\113\052\099\043\067\051\101\056\075\080\061",
		"\080\090\057\074\106\112\117\111\056\113\110\086\121\077\061\061",
		"\100\074\100\068\112\113\112\118\073\067\078\068\073\113\102\115\121\090\117\051\073\113\102\068\056\053\061\061",
		"\080\050\112\086\073\113\052\047\043\110\073\102\109\115\051\068\056\084\088\053\112\112\122\079",
		"\100\084\051\051\114\115\088\053\119\072\112\099\073\077\061\061",
		"\104\090\110\118",
		"\109\103\112\120\056\120\101\102\048\084\110\043\109\090\078\074\056\113\112\098",
		"\114\084\112\088\048\090\117\120\048\090\107\122\073\113\112\047\104\115\110\047\048\080\061\061",
		"\056\113\112\051\048\113\112\098\114\050\107\051\073\072\079\061",
		"\107\115\052\099\073\077\061\061",
		"\080\084\052\099\073\113\112\099\073\077\061\061",
		"\119\100\080\061",
		"\090\080\061\061",
		"\100\074\109\068\100\072\112\098\109\084\051\051\114\084\112\113\121\103\117\097\121\090\078\075\100\115\052\074",
		"\048\113\102\086\109\084\052\098\048\067\102\074",
		"\107\115\052\075\107\090\078\074",
		
		"\100\113\057\051\106\090\112\098\107\050\112\066",
		"\112\113\112\118\073\067\057\051\109\115\112\088",
		"\104\090\052\074\073\090\057\102\100\084\117\098\121\103\054\120",
		"\080\084\052\099\073\072\122\068\056\113\057\102\114\075\079\061",
		"\080\084\052\111\106\080\061\061",
		"\080\084\051\068\056\050\117\102\043\067\078\080\080\111\061\061",
		"\100\074\112\081\107\115\102\086\121\113\102\099\048\120\112\115\048\115\112\070\073\077\061\061",
		"\114\084\051\098\121\090\101\111",
		"\100\074\109\068\100\115\112\057\073\090\112\086\073\067\048\066\114\084\051\066\056\115\073\117\121\090\078\066\048\084\110\047\048\112\117\120\109\103\122\120\048\090\080\061",
		"\048\103\048\102\056\075\107\082\109\090\101\102\114\111\061\061",
		"\119\072\112\047\109\090\078\068\121\090\107\119\056\084\052\120\100\113\110\098\073\077\061\061",
		"\100\074\112\081\107\103\110\101\121\103\054\100\056\084\052\088",
		"\109\090\101\051\106\115\102\099\048\120\117\051\114\050\080\061",
		"\109\090\078\120\121\100\057\051\048\111\061\061",
		"\112\084\110\066\073\113\102\099\048\098\054\120\056\098\054\086\073\113\110\098\073\076\054\120\114\115\110\074\048\080\061\061",
		"\080\075\112\120\073\113\052\099\114\111\061\061",
		"\104\090\052\074\073\090\057\102\114\111\061\061",
		"\090\053\061\061",
		"\048\115\110\070\048\080\061\061",
		"\043\086\122\054\080\100\122\110\107\080\061\061",
		"\107\113\112\086\073\072\122\068\106\090\112\074",
		"\083\122\065\107\066\076\054\079\056\084\117\051\056\076\054\080\056\113\110\078\048\103\043\061",
		"\114\084\110\084\048\100\057\051\114\050\107\080\056\050\117\066\073\113\102\068\056\053\061\061",
		"\056\113\110\086\073\067\048\066\114\084\053\061",
		"\121\090\078\111\073\103\107\079\121\090\078\049",
		"\100\103\112\051\056\075\107\066\073\072\074\053\073\113\083\053\112\072\122\051\048\113\100\061",
		"\109\084\057\051\056\103\077\061",
		"\080\075\112\120\073\113\052\099",
		"\090\074\102\099\048\113\112\118",
		"\056\113\052\070\121\101\054\068\114\084\102\120\121\090\052\099",
		"\083\122\065\082\097\098\054\054\073\103\107\068\043\067\048\066\114\084\051\066\056\115\114\053\100\084\112\120\073\113\102\099\048\050\079\061",
		"\100\074\109\068\112\103\054\074\109\103\107\102\080\103\112\120\056\120\048\066\114\084\051\066\056\115\073\104\073\113\110\120\048\080\061\061",
		"\080\050\122\051\073\113\112\098\043\067\102\086\056\113\110\099\048\076\077\068\043\067\047\051\073\084\110\097",
		"\114\084\057\102\121\103\107\099\121\090\117\049\103\084\078\102\073\067\077\111\105\070\043\099\079\077\061\061",
		"\100\113\057\051\109\084\112\097\056\084\057\074\048\103\043\061",
		"\112\084\110\120\048\103\122\103\109\103\048\102\100\050\054\102\048\090\080\061",
		"\107\084\051\068\114\050\080\053\100\084\051\051\114\115\088\053\119\072\112\099\073\077\061\061",
		"\107\103\122\098\056\050\043\053\121\103\107\102\056\119\051\086\087\119\054\068\114\108\054\111\056\113\110\078\048\103\043\053\109\084\110\099\122\050\080\053\109\115\100\053\048\090\101\111\073\072\074\099",
		"\114\072\122\066\109\084\112\090\109\090\057\101\048\080\061\061",
		"\079\069\079\061",
		"\107\103\122\098\056\050\043\055\043\072\107\051\114\115\073\102\073\076\054\111\056\113\110\078\048\103\043\053\056\115\052\120\043\113\048\068\073\090\078\074\105\053\061\061",
		"\109\084\052\099\056\115\112\070\073\113\102\068\056\053\061\061",
		"\080\084\051\098\056\084\101\102\043\110\122\068\048\077\061\061",
		"\119\090\078\111\073\103\080\061",
		"\104\103\102\120\121\113\102\070\109\090\111\061",
		"\083\122\065\082\097\098\054\054\073\103\107\068\043\067\048\051\114\115\120\053\100\084\112\120\073\113\102\099\048\050\079\061",
		"\112\113\112\088\048\103\054\068\114\075\080\053\112\113\083\053\104\102\054\069",
		"\100\072\122\068\056\103\054\120\104\115\110\047\048\080\061\061",
		"\080\115\110\070\121\084\073\098\056\050\112\099\048\110\107\098\109\090\078\086\114\113\110\098\048\090\078\070\106\080\061\061",
		"\118\097\065\057\071\071\108\116\043\067\110\101\073\113\083\053\100\115\112\086\114\113\110\050\056\108\054\067\048\090\057\051\106\080\061\061",
		"\107\050\112\066\100\084\112\098\073\115\102\070\048\080\061\061",
		"\112\113\102\102\114\053\061\061",
		"\119\113\112\051\056\072\107\097",
		"\112\074\102\080\043\067\052\099\056\072\074\061",
		"\109\103\112\120\056\120\048\066\114\084\051\066\056\115\114\061",
		"\048\075\122\068\056\080\061\061",
		"\090\077\061\061",
		"\080\084\110\101\048\084\051\120",
		"\079\069\074\061",
		"\121\103\117\054\073\067\112\084\048\090\078\120",
		"\112\084\112\108\121\113\052\068\121\111\061\061",
		"\107\090\078\051\109\115\057\102\048\077\061\061",
		"\100\084\112\098\073\115\112\098\043\067\102\099\048\115\083\061",
		"\112\072\073\102\048\090\078\104\048\103\122\084\121\090\117\102",
		"\107\115\102\086\121\113\102\099\048\098\054\119\056\084\107\086",
		"\080\115\057\051\109\084\047\068\073\103\080\061",
		"\080\103\112\120\056\098\054\100\100\076\054\117\048\090\073\051\056\113\052\074\056\084\118\053\107\103\048\102\056\075\080\061",
		"\112\113\112\118\073\072\112\098\048\080\061\061",
		"\080\084\051\051\056\115\117\102",
		"\119\090\078\084\048\090\078\120\056\050\122\078\119\103\107\102\056\080\061\061",
		"\107\113\110\120\109\080\061\061",
		"\100\084\051\068\073\101\107\051\109\102\107\066\073\113\057\102",
		"\107\090\078\120\048\103\043\053\106\090\052\101\114\108\054\067\121\103\117\070\056\050\122\074\043\072\073\102\109\115\051\068\056\084\088\053\112\112\122\079",
		"\107\115\057\068\109\103\107\080\056\113\110\120\048\115\052\098\056\080\061\061",
		"\080\084\052\111\121\090\112\074\043\080\061\061",
		"\100\072\122\066\073\115\110\120\048\119\054\086\048\103\122\084\048\103\043\053\109\084\052\074\048\119\054\120\121\090\107\051\121\098\054\074\121\103\107\102\056\103\112\049\109\090\118\061",
		"\107\072\122\051\048\084\073\051\109\115\057\102",
		"\100\074\112\081\080\090\117\120\121\103\048\051\073\113\112\110\056\115\117\097\109\090\078\120\121\090\078\075\080\090\057\120\109\103\043\061",
		"\104\090\112\086\121\110\054\051\114\075\107\067\048\103\107\051\121\090\057\079\048\103\048\102\056\077\061\061",
		"\079\069\114\061",
		"\048\075\122\068\056\100\052\115\048\075\117\102\073\077\061\061",
		"\119\090\080\061",
		"\112\113\112\088\048\103\054\068\114\075\080\053\112\113\083\053\100\113\057\051\106\090\112\098",
		"\107\115\110\084\056\050\122\066\073\113\112\104\048\090\117\098\048\103\080\061",
		"\119\090\117\068\056\053\061\061",
		"\100\050\107\051\114\074\117\068\073\090\078\120",
		"\119\084\052\097\109\090\078\051",
		"\104\090\110\120\048\103\122\066\109\090\111\061",
		"\104\090\110\066\056\053\061\061",
		"\104\113\102\099\121\098\054\120\121\090\107\051\121\098\054\084\109\090\057\066\048\077\061\061",
		"\107\103\122\098\056\050\043\053\043\113\102\099\073\115\110\088\121\090\080\053\073\113\110\098\048\084\112\120\043\072\054\088\109\103\102\102\114\108\118\061",
		"\080\084\057\068\109\084\047\100\121\090\101\102",
		"\100\113\110\098\073\113\102\070\056\113\112\110\056\090\102\120\073\113\112\098",
		"\080\084\052\088\056\050\043\061",
		"\048\113\110\098\121\120\078\066\048\084\051\120",
		"\107\113\102\051\056\113\052\075",
		"\119\103\117\080\056\113\110\078\121\090\078\075",
		"\083\122\065\107\066\119\054\080\056\113\110\078\048\103\122\086",
		"\080\084\110\099\080\084\052\088\056\113\102\074\048\080\061\061",
		"\114\113\052\086\121\103\107\066\056\084\118\061",
		"\104\084\078\088\106\100\101\068\109\115\102\088\048\080\061\061",
		"\109\050\112\086\073\113\052\047\112\103\122\088",
		"\114\115\073\108\109\119\053\098\079\069\077\088\043\069\043\111\079\076\111\053\079\070\077\111\105\076\077\111\105\070\109\066",
		"\104\103\102\120\121\113\102\070",
		"\056\115\112\050",
		"\080\115\057\051\109\084\088\053\119\113\052\088\048\080\061\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098\080\090\107\074\048\090\080\061",
		"\107\113\102\086\109\084\052\098\048\077\061\061",
		"\114\050\107\051\073\072\112\086\107\090\078\070\121\113\110\099\073\077\061\061",
		"\119\090\078\084\048\090\078\120\056\050\122\078",
		"\100\113\057\051\106\090\112\098\080\090\107\074\048\090\080\061",
		"\119\090\078\086\073\113\110\099\073\067\117\051\073\113\117\097",
		"\112\084\110\120\048\103\122\103\109\103\048\102\100\084\102\055\048\080\061\061",
		"\100\115\112\115\056\113\112\070\073\113\110\099\109\084\100\061",
		"\109\103\112\120\056\120\048\051\114\115\101\066\056\115\114\061",
		"\112\090\078\049\056\115\052\050\056\053\061\061",
		"\080\050\122\051\073\113\112\098\043\067\102\086\056\113\110\099\048\077\061\061",
		"\056\113\052\050\048\103\043\061",
		"\104\103\112\088\109\090\074\053\114\072\122\068\114\084\112\086\043\113\112\099\109\084\051\051\056\075\080\099\105\108\118\053\104\090\112\099\109\084\110\098\121\119\077\061",
		"\119\090\078\084\109\090\057\066\048\076\054\122\056\075\054\101\073\077\061\061",
		"\112\113\112\088\048\103\054\068\114\075\080\061",
		"\056\075\054\070\104\115\110\047\048\103\079\061",
		"\107\113\112\070\109\090\057\086",
		"\043\119\067\051\043\067\101\110\104\102\100\053\100\074\102\082\107\101\079\061",
		"\080\103\112\120\056\101\117\102\056\113\057\100\121\072\122\102\114\084\051\068\056\113\107\122\056\075\054\101\073\077\061\061",
		"\080\103\112\120\056\120\048\051\114\115\101\100\121\077\061\061",
		"\100\074\112\119\056\084\057\088\107\090\078\070\121\113\110\099\073\077\061\061",
		"\100\115\112\057\073\090\112\086\073\067\117\088\121\090\112\099\073\110\117\120\056\050\054\113\121\103\117\097\121\090\078\075",
		"\079\104\112\049\043\067\117\068\121\090\078\086",
		"\105\108\052\054\056\113\107\078\112\113\052\066",
		"\107\113\112\051\109\050\107\066\073\115\110\120\048\090\080\053\080\103\112\120\056\098\054\113\121\103\117\097\121\090\078\075",
		"\112\103\117\102\112\074\102\117",
		"\104\113\052\070\109\090\057\080\056\113\110\078\048\103\043\061",
		"\107\115\102\086\121\113\102\099\048\101\122\051\048\113\110\098\112\113\052\075\048\084\057\102",
		"\104\115\083\053\119\103\117\088\109\090\078\074\043\110\117\102\056\113\112\070\073\113\112\074",
		"\107\103\117\068\073\113\112\098\121\090\079\053\107\113\112\111\073\113\053\061",
		"\104\115\110\047\048\080\061\061",
		"\104\090\110\118\100\050\054\051\056\112\117\102\109\084\052\099\048\072\079\061",
		"\048\084\110\047\048\100\102\099\114\050\107\051\056\115\117\102\119\090\080\052",
		"\080\120\048\098\109\090\101\102",
		"\104\084\078\069\056\113\102\102\056\075\107\110\073\115\112\099\073\077\061\061",
		"\090\098\112\086\103\119\054\113\109\090\102\088\048\090\080\053\073\113\083\053\073\072\122\051\048\113\100\053\087\076\112\074\105\098\112\074\087\080\061\061",
		"\104\103\112\088\073\113\074\061",
		"\112\112\122\110\105\101\112\111\048\113\110\120\048\100\052\118\106\090\073\102\056\053\061\061",
		"\114\115\122\118\109\103\117\086\048\103\080\055\105\098\052\115\056\084\078\120\114\098\052\115\109\090\101\066\056\113\102\102\114\098\052\112\109\075\112\099\073\072\100\099\121\075\117\068\056\053\061\061",
		"\114\084\052\098\073\077\061\061",
		"\112\090\078\113\109\103\048\068\114\115\102\120\048\119\054\054\056\113\111\061",
		"\112\072\122\102\109\103\117\101\114\115\100\053\100\115\052\068\056\080\061\061",
		"\114\115\110\099\048\113\052\047",
		"\122\103\079\089\122\090\043\097\087\080\061\061",
		"\073\113\102\047\048\080\061\061",
		"\104\113\052\051\048\113\102\099\048\098\118\099\105\053\061\061",
		"\114\084\112\088\056\110\054\098\121\090\117\102",
		"\104\050\054\102\056\115\112\074",
		"\100\084\112\088\056\110\054\098\121\090\117\102\104\113\110\108\048\090\111\061",
		"\100\115\110\098\048\080\061\061",
		"\112\113\051\066\109\084\047\099\048\103\117\086",
		"\082\069\079\098\079\104\074\111\079\070\077\086\082\104\114\118\117\069\074\061",
		"\121\090\078\086\048\103\122\120",
		"\100\103\112\051\048\077\061\061",
		"\090\098\112\086\103\119\077\102\114\098\077\097\122\090\080\068\122\090\080\066\076\102\117\101\109\084\117\102\114\050\079\055\043\076\112\074\043\072\111\053\107\115\110\066\056\113\112\074\082\108\077\102\048\077\061\061",
		"\112\112\112\122\107\077\061\061",
		"\080\050\112\120\114\084\117\102\056\115\112\069\056\084\078\120\114\115\052\088\056\113\112\098",
		"\100\084\112\088\048\090\117\120\043\110\107\066\048\103\043\061",
		"\100\050\107\068\114\077\061\061",
		"\100\084\047\078\109\115\052\118\107\075\080\061",
		"\100\113\052\086\121\103\107\066\056\084\118\061",
		"\112\100\102\104\073\072\122\068\121\084\100\061",
		"\100\113\110\098\073\072\079\061",
		"\107\115\057\068\109\103\107\080\056\113\110\078\048\103\043\061",
		"\100\074\109\068\100\072\112\098\109\084\051\051\114\084\112\076\109\090\102\120",
		"\107\113\112\115\109\103\112\088\073\077\061\061",
		"\100\074\109\068\100\084\112\088\056\067\110\088\056\067\102\120\048\090\101\086",
		"\107\115\102\086\121\076\054\050\121\090\057\088\043\113\122\102\043\072\117\068\056\113\080\053\109\103\112\120\056\084\101\051\073\113\102\070\109\090\057\088\106\119\054\050\121\113\112\099\043\072\107\097\048\119\054\070\109\103\107\070\121\076\054\098\048\090\110\070\121\113\112\086\043\077\061\061",
		"\080\075\122\066\048\084\051\120\056\115\112\086\114\111\061\061",
		"\048\075\122\068\056\100\051\102\106\077\061\061",
		"\107\072\112\098\109\103\107\066\056\084\118\061",
		"\119\077\061\061",
		"\109\084\052\099\109\084\110\120",
		"\114\113\057\051\073\113\048\068\114\115\120\061",
		"\100\050\107\068\114\067\052\099\107\115\110\066\056\067\101\051\073\113\117\097\048\103\079\061",
		"\100\115\110\098\121\103\107\078",
		"\080\084\052\099\073\113\110\066\056\115\112\098",
		"\112\115\110\098\121\090\110\099\073\077\061\061",
		"\048\075\122\068\056\112\122\072\080\053\061\061",
		"\114\115\112\115\114\115\112\086\121\110\107\066\048\103\122\122\056\075\048\102\056\075\107\068\114\075\074\061",
		"\100\084\112\088\048\090\117\120\043\110\054\088\109\103\102\102\114\053\061\061",
		"\079\069\080\061",
		"\100\084\047\078\109\115\052\118\080\115\088\061",
		"\100\074\048\081\080\103\073\051\121\103\107\100\114\115\110\074\048\112\122\102\114\050\054\068\056\075\117\102",
		"\118\097\065\057\071\071\108\116\043\067\110\101\073\113\083\053\107\115\102\086\121\113\102\099\048\098\054\067\048\090\057\051\106\080\061\061",
		"\104\115\052\098\056\090\110\088",
		"\103\108\112\086\087\108\053\099\105\119\074\102\114\098\097\074",
		"\107\113\112\115\109\103\112\088\073\069\097\053\079\104\077\061",
		"\112\113\112\118\073\077\061\061",
		"\080\090\057\074\106\112\107\068\121\112\052\103\121\090\078\074",
		"\100\084\047\078\109\115\052\118\107\113\118\061",
		"\100\115\112\047\048\090\101\108\048\103\122\087\056\084\102\099\114\111\061\061",
		"\104\113\052\070\121\101\054\068\114\084\102\120\121\090\052\099",
		"\083\122\065\100\102\098\054\104\048\103\122\084\048\103\043\053\104\113\102\099\121\111\061\061",
		"\112\115\110\098\121\090\110\099\073\067\102\074",
		"\112\084\052\098\056\119\054\043\073\090\078\120",
		"\107\090\078\051\109\115\057\102\043\067\048\066\114\084\051\069\109\103\112\075\121\072\080\053\112\084\112\108\121\113\052\068\121\111\061\061",
		"\104\115\083\053\100\072\122\066\109\084\100\061",
		"\107\115\102\086\121\067\102\120\080\090\057\074\106\112\107\068\121\080\061\061",
		"\107\115\052\099\073\110\117\120\106\090\057\102",
		"\100\084\047\078\109\115\052\118\112\103\077\061",
		"\107\115\052\088\048\113\112\098",
		"\107\113\102\086\109\084\052\098\048\076\054\112\114\084\112\098\043\067\102\067\043\076\051\116\114\072\107\066\056\084\078\051\056\076\074\061",
		"\105\111\061\061",
		"\114\084\112\088\048\090\117\120\048\090\107\100\121\090\112\098\114\111\061\061",
		"\112\113\112\118\073\110\117\066\106\115\100\061",
		"\100\050\107\051\073\072\112\086",
		"\119\072\112\047\109\090\078\068\121\090\107\119\056\084\052\120\100\113\110\098\073\076\054\099\056\050\080\053\048\115\052\101\056\115\080\051",
		"\080\103\112\120\056\098\054\076\073\103\074\053\112\084\112\051\073\113\051\102\114\053\061\061",
		"\100\084\102\086\106\103\054\097\073\103\079\061",
		"\109\103\112\120\056\101\122\102\114\050\054\051\073\084\118\061",
		"\056\075\054\070\107\115\052\088\048\113\112\098",
		"\100\074\100\068\107\103\110\101\121\103\054\100\056\084\052\088\107\075\122\068\056\100\051\068\073\113\122\051\114\053\061\061",
		"\122\104\067\061",
		"\073\113\110\108\056\113\100\061",
		"\100\084\051\068\109\084\047\102\048\077\061\061",
		"\104\113\102\099\121\098\054\110\114\075\122\068\114\053\061\061",
		"\119\103\117\088\109\090\078\074\107\072\122\068\114\113\107\068\073\084\118\061",
		"\048\115\102\088\073\113\112\098\100\115\112\075\048\103\053\061",
		"\107\113\112\070\109\090\111\061",
		"\107\113\102\086\109\090\122\088\048\119\077\086\107\076\054\119\048\090\078\074\048\103\043\061",
		"\109\084\052\111\106\080\061\061",
		"\107\084\112\120\112\113\102\102\114\074\048\098\056\084\101\119\109\103\122\066\073\072\074\061",
		"\107\113\102\086\109\084\052\098\048\076\054\088\121\090\078\049\043\113\117\068\114\113\102\102\048\076\054\120\056\098\054\070\056\113\102\111\109\115\052\051\114\115\080\099",
		"\100\084\052\047\048\119\054\119\056\084\107\086\043\113\117\051\056\108\073\120\043\113\122\102\043\072\054\101\114\115\117\097\109\103\117\102\048\076\054\108\048\090\117\051\073\103\117\102\043\072\107\097\048\103\074\053\109\103\122\102\043\110\048\122\100\076\054\068\056\115\057\078\043\113\052\098\043\113\107\068\048\103\117\099\122\050\080\053\121\113\110\084\048\119\054\051\043\072\054\098\121\090\117\102\043\113\101\051\114\076\118\061",
		"\080\115\052\098\048\113\112\098",
		"\079\104\043\084\082\069\079\057\082\069\067\101\082\069\079\078\117\086\043\120",
		"\104\090\052\101\114\084\112\076\073\103\107\120\056\084\118\057\080\084\057\066\109\084\088\061",
		"\079\069\053\061",
		"\048\103\048\102\056\075\107\104\048\103\080\061",
		"\100\074\109\068\080\103\073\051\121\103\107\100\114\115\110\074\048\112\122\102\114\050\054\068\056\075\117\102",
		"\090\090\112\086\080\075\112\120\073\113\052\099\104\115\110\047\048\080\061\061",
		"\080\103\112\120\056\098\054\100\114\115\110\074\048\080\061\061",
		"\073\072\122\051\048\113\100\053\114\050\112\070\109\084\112\086\114\084\048\101\056\077\061\061",
		"\100\050\107\051\114\075\080\053\080\103\112\120\056\098\054\113\109\103\122\047",
		"\080\103\112\120\056\120\048\051\114\115\101\100\056\084\073\075\056\113\100\061",
		"\103\101\052\099\109\090\101\102\109\084\110\088\056\077\061\061",
		"\107\084\052\120\121\113\110\047\080\115\052\088\048\077\061\061",
		"\107\090\078\120\048\103\043\053\106\090\052\101\114\108\054\067\121\103\117\070\056\050\122\074\043\067\102\067",
		"\056\113\052\068\114\067\107\102\056\113\110\078",
		"\107\084\110\047\048\119\054\122\056\115\048\068",
		"\080\084\057\066\048\090\078\120",
		"\104\113\052\070\121\084\112\074",
		"\109\103\112\120\056\101\107\098\109\090\107\102\100\050\107\051\114\075\080\061",
		"\112\072\122\051\048\113\100\053\114\050\107\068\114\072\054\102\048\076\118\061",
		"\079\069\067\061",
		"\104\090\110\075\056\115\102\120\073\090\107\102",
		"\080\090\117\120\121\103\048\102",
		"\112\113\112\098\114\115\110\066\056\053\061\061",
		"\100\050\112\070\109\084\112\086\114\111\061\061",
		"\056\115\110\047\048\080\061\061",
		"\100\115\110\099\048\113\052\047",
		"\080\103\112\120\056\101\117\102\056\113\111\061",
		"\104\050\112\120\056\113\102\099\048\080\061\061",
		"\119\090\107\088\048\090\080\061",
		"\112\113\112\118\073\072\112\098\048\100\102\074",
		"\122\090\080\049",
		"\112\072\122\051\121\090\111\061",
		"\116\086\083\085",
		"\079\104\043\118\079\104\109\050\079\069\109\118\079\070\074\057\117\086\077\086",
		"\119\084\052\097\109\090\078\051\043\110\048\068\056\113\117\051\056\115\083\061",
		"\104\113\052\070\121\098\054\080\056\113\110\078\048\103\043\053\100\113\052\086\121\103\107\066\056\084\118\061",
		"\100\072\122\066\056\090\110\098\106\112\054\051\114\075\080\061",
		"\112\100\102\079\056\084\110\074\107\113\112\088\109\103\074\061",
		"\048\115\052\098\056\090\110\120",
		"\100\074\112\081\107\115\102\086\121\113\102\099\048\120\117\068\056\103\054\088\048\103\107\102\048\077\061\061",
		"\117\080\061\061",
		"\100\113\057\102\109\103\117\102\043\113\112\099\073\113\112\098\043\113\067\053\056\075\112\047\109\115\112\098\105\076\054\099\056\050\080\053\073\113\112\118\073\076\118\061",
		"\118\066\089\053\071\071\108\116\043\067\122\051\121\103\107\086\043\113\048\068\056\113\107\102\114\108\054\099\056\050\080\053\048\115\052\101\056\115\080\053\121\090\118\053\100\115\112\111\056\113\102\070\109\103\107\102\048\110\117\120\056\050\122\051\048\084\100\061",
		"\100\074\048\081\100\115\112\057\073\090\112\086\073\067\048\066\114\084\051\066\056\115\073\117\121\090\078\066\048\084\110\047\048\112\117\120\109\103\122\120\048\090\080\061",
		"\107\113\112\086\109\050\122\066\114\072\107\066\056\084\118\061",
		"\109\103\117\086\048\103\107\122\048\077\061\061",
		"\105\076\077\061",
		"\104\113\102\075\121\072\107\066\056\115\114\061",
		"\114\084\112\088\048\090\117\120\048\090\107\080\056\113\110\078\048\103\122\082\109\090\101\102",
		"\100\115\112\111\056\113\102\068\056\053\061\061",
		"\100\115\112\074\073\090\117\102\043\072\107\102\106\072\107\101\114\115\112\086\043\113\048\068\114\108\054\108\048\103\107\120\048\103\043\053\107\102\054\104",
		"\112\111\061\061",
		"\056\090\110\111\105\103\054\066\056\053\061\061",
		"\119\072\107\120\114\110\117\102\114\075\048\066\109\084\100\061",
		"\100\113\057\051\106\090\112\098\114\111\061\061",
		"\114\115\112\111\048\090\110\120",
		"\114\084\112\088\048\090\117\120\048\090\107\110\073\115\112\099\073\077\061\061",
		"\114\050\054\051\073\084\118\061",
		"\103\108\053\099\105\119\074\102\114\098\097\102\087\076\112\086\087\102\110\120\106\119\112\086\087\070\097\102\114\098\097\102\048\076\088\102\114\098\097\102\087\119\080\061",
		"\080\084\110\086\073\110\117\097\109\090\107\068\073\111\061\061",
		"\104\113\112\075\048\090\078\074\109\103\122\078",
		"\112\072\122\068\114\113\102\070\109\090\111\053\107\050\122\068\073\115\100\061",
		"\112\084\110\120\048\103\122\119\048\090\048\088\048\090\117\120\109\090\078\070\048\080\061\061",
		"\056\113\110\086\073\110\052\111\056\050\117\066\073\113\102\068\056\108\078\089\114\084\052\099",
		"\118\066\098\110\043\067\112\099\109\084\051\051\056\075\080\053\107\115\052\101\056\115\080\051\082\108\077\061",
		"\100\084\112\088\056\110\054\098\121\090\117\102",
		"\112\084\052\098\121\050\117\111\109\090\117\102",
		"\107\115\102\086\121\076\054\122\073\076\054\054\056\113\107\078\112\113\052\066",
		"\080\090\057\088\056\050\073\082\056\084\078\102",
		"\119\103\107\102\056\100\078\051\056\090\100\061",
		"\100\084\102\055\048\080\061\061",
		"\114\113\057\051\109\084\112\122\048\069\120\061",
		"\107\084\102\120\121\072\112\108\043\113\057\066\056\115\088\053\109\084\052\111\121\090\112\074\043\072\107\068\043\113\117\088\121\103\054\108\056\084\110\098\048\076\118\061",
		"\112\113\102\102\114\102\112\120\121\090\057\066\073\072\074\061",
		"\112\115\110\098\121\090\110\099\073\072\079\061",
		"\100\115\112\074",
		"\104\090\110\118\100\113\057\051\106\090\112\098\114\111\061\061",
		"\121\103\107\102\056\112\110\120\106\080\061\061",
		"\048\090\078\051\109\115\057\102\048\077\061\061",
		"\100\072\122\068\109\115\110\108\121\090\057\066\073\072\074\061",
		"\116\084\107\051\073\113\067\052",
		"\080\084\051\051\114\115\110\070\073\113\112\098",
		"\100\074\112\081\107\103\110\101\121\103\054\122\073\113\112\047",
		"\107\113\102\086\109\090\122\088\048\090\080\061",
		"\104\113\052\086\073\076\054\104\121\113\052\098\048\080\061\061",
		"\107\115\110\084\056\050\122\066\073\113\112\117\106\103\107\097\121\090\079\061",
		"\079\104\079\061",
		"\104\050\112\120\048\113\052\068\114\074\110\047\109\115\102\102\056\075\080\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098\114\111\061\061",
		"\100\084\051\051\114\115\112\074",
		"\107\113\110\120\109\112\122\102\114\113\057\066\056\084\118\061",
		"\107\120\112\100",
		"\080\084\051\066\056\113\107\054\048\113\107\102\048\077\061\061",
		"\100\050\107\098\056\084\047\102\112\113\051\066\109\084\047\099\048\103\117\086",
		"\122\103\079\053\087\076\112\086\087\080\061\061",
		"\112\103\122\088",
		"\080\090\117\070\048\103\054\120\112\072\122\051\048\113\100\061",
		"\112\115\110\088\073\090\112\086",
		"\090\090\112\086",
		"\112\072\122\051\056\075\117\111\109\103\122\102\056\115\117\078",
		"\112\115\102\098\073\072\112\051\056\067\102\099\114\072\112\120\104\090\110\099\109\090\073\102\114\053\061\061",
		"\048\115\102\086\121\067\078\051\056\090\100\061",
		"",
		"\118\066\084\079\043\067\112\098\114\115\052\098",
		"\056\075\112\047\109\115\112\098",
		"\112\113\112\118\073\067\117\068\056\113\052\098\079\111\061\061",
		"\100\084\112\070\114\115\112\120",
		"\104\090\112\120\109\090\107\051\073\113\067\061",
		"\107\113\102\086\109\090\122\088\048\119\052\104\121\084\102\111\043\067\117\101\073\072\117\070\048\090\078\102\043\067\110\099\121\090\101\051\073\113\102\068\056\053\061\061",
		"\121\090\078\115\056\111\061\061",
		"\119\115\052\108\119\090\080\061",
		"\056\084\057\074\080\100\048\105\100\084\117\098\121\103\054\120",
		"\118\066\084\079\043\067\112\098\114\115\052\098\082\108\054\082\056\098\054\110\056\115\117\097\109\090\078\120\043\072\117\102\056\113\112\070\073\113\112\074\105\053\061\061",
		"\080\090\122\086\056\084\057\101\073\113\112\104\121\103\066\102",
		"\104\050\122\066\048\084\102\099\109\090\057\080\056\113\110\078",
		"\121\090\078\084\048\090\078\120\056\050\122\078\080\084\110\070\121\113\112\100\121\090\112\098",
		"\112\113\112\098\073\113\102\051\114\075\074\061",
		"\080\084\110\088\056\113\122\051\109\084\088\061",
		"\114\084\110\084\048\090\107\080\056\050\079\061",
		"\080\084\052\099\056\115\112\070\073\113\112\074",
		"\043\120\048\113\107\074\048\113\107\053\061\061",
		"\119\090\101\051\048\084\100\061",
		"\100\072\112\098\109\084\051\051\114\084\100\053\100\115\052\074",
		"\104\090\102\099",
		"\107\113\102\086\109\084\052\098\048\067\102\074",
		"\121\103\117\054\073\103\107\068\107\115\102\086\121\113\102\099\048\111\061\061",
		"\080\084\052\111\106\119\054\079\121\090\078\049",
		"\080\103\112\120\056\120\048\066\114\084\051\066\056\115\114\061",
		"\080\084\057\066\109\084\088\053\080\084\052\111\106\119\054\120\056\098\054\104\121\113\110\098\048\119\052\087\056\084\102\099",
		"\080\115\110\070\121\084\073\098\056\050\112\099\048\067\102\047\109\090\073\102\112\072\122\051\056\075\117\111\109\103\122\102\056\115\117\078",
		"\080\103\112\120\056\098\054\100\048\090\057\102\114\113\052\098\073\076\054\100\121\072\122\102\114\084\051\068\056\113\080\061",
		"\107\113\112\086\109\111\061\061",
		"\119\103\107\102\056\112\117\120\114\115\102\099\048\101\112\120\121\090\057\066\073\072\074\061",
		"\107\115\102\086\121\113\112\086",
		"\119\103\107\102\056\112\112\120\121\090\057\066\073\072\074\061",
		"\080\103\054\111\056\072\102\104\073\072\122\068\121\084\112\117\056\084\107\102",
		"\100\113\057\051\106\080\061\061",
		"\048\115\102\099\048\077\061\061",
		"\080\115\110\070\121\050\054\051\109\084\088\061",
		"\103\120\102\099\048\113\112\118",
		"\090\090\052\101\114\108\054\070\121\113\110\098\109\090\117\120\048\103\043\053\056\115\052\120\043\113\048\068\073\090\078\074\105\053\061\061",
		"\121\103\117\117\048\090\073\051",
		"\107\115\110\084\056\050\122\066\073\113\112\074",
		"\107\090\078\051\109\115\057\102",
		"\112\115\110\088\073\090\100\061",
		"\100\072\122\068\106\113\102\047\121\103\107\078\100\072\122\068\056\103\054\120\100\084\112\098\073\115\102\070\048\080\061\061",
		"\080\103\112\120\056\098\054\119\048\103\117\111\109\103\073\099\043\110\073\097\048\090\118\053\100\050\107\101\109\084\088\061",
		"\056\050\122\066\048\084\102\099\109\090\057\080\056\050\117\066\073\113\102\068\056\053\061\061",
		"\107\115\102\086\121\113\112\098\056\090\110\099\043\067\102\086\056\113\110\099\048\077\061\061",
		"\107\103\054\066\109\111\061\061",
		"\080\084\052\098\109\090\111\053\100\115\112\102\048\075\079\061",
		"\112\072\102\111\048\080\061\061",
		"\119\090\078\084\056\084\047\102\100\084\112\098\073\115\112\098",
		"\114\115\073\108\109\119\053\118\117\076\111\053\079\104\043\084\105\076\077\118\117\119\111\053\079\076\118\084\079\119\074\061",
		"\107\084\110\075\109\090\111\053\114\113\110\098\114\084\102\099\048\098\054\111\056\113\110\070\048\100\102\074\043\076\083\053\048\084\110\047\048\100\102\099\114\050\107\051\056\115\117\102\119\090\080\061",
		"\107\115\110\084\056\050\122\066\073\113\112\079\048\090\073\102\056\115\080\061",
		"\109\090\117\070\048\103\054\120",
		"\100\113\057\051\109\084\112\122\048\077\061\061",
		"\080\090\078\120\121\119\054\079\109\090\114\053\105\098\054\079\056\050\114\053\112\113\112\118\073\072\112\098\048\080\061\061",
		"\048\115\102\086\121\113\102\099\048\120\110\099\121\090\101\051\073\113\102\068\056\053\061\061",
		"\114\115\110\098\121\103\107\078",
		"\107\050\112\066\080\084\052\099\073\072\122\068\056\077\061\061",
		"\100\113\110\075\048\103\079\061",
		"\100\115\112\099\048\113\112\098\121\090\078\075",
		"\114\115\073\108\109\119\053\078\082\119\111\053\079\070\077\084\105\076\077\057\117\069\077\088\043\069\077\099\082\076\074\061",
		"\119\113\052\047\048\080\061\061",
		"\079\104\079\120\082\104\109\101\117\069\043\101\117\070\109\120\079\069\079\120",
		"\107\113\102\086\114\113\057\051\106\080\061\061",
		"\090\120\122\101\106\119\054\119\056\084\080\053\107\103\122\098\056\050\122\073\082\053\061\061",
		"\119\090\073\099\056\050\122\102\107\050\112\066\119\090\078\086\048\103\080\061",
		"\073\084\110\066\073\077\061\061",
		"\100\115\112\111\056\113\102\070\109\103\107\102\048\110\117\120\056\050\122\051\048\084\100\061",
		"\118\066\084\079\043\110\107\102\056\113\112\111\056\050\122\120\043\067\048\051\121\090\057\102\048\077\061\061",
		"\080\103\112\120\056\101\117\102\056\113\057\100\056\084\073\075\056\113\100\061",
		"\107\113\110\120\109\119\054\080\121\090\078\075",
		"\100\074\048\081\119\090\078\066\073\113\102\051\073\113\112\100\114\115\110\074\048\080\061\061",
		"\100\084\110\084\048\100\052\098\121\090\073\066\056\115\110\088",
		"\100\115\052\074",
		"\104\113\112\084\048\090\111\111\079\080\061\061",
	};
for AldyToiq, AldyToiH in ipairs({ { 1, 505 }, { 1, 303 }, { 304, 505 } }) do
	while AldyToiH[1] < AldyToiH[2] do
		AldyToiM2[AldyToiH[1]], AldyToiM2[AldyToiH[2]], AldyToiH[1], AldyToiH[2] = AldyToiM2[AldyToiH[2]], AldyToiM2[AldyToiH[1]], AldyToiH[1] + 1, AldyToiH[2] - 1;
	end;
end;
local function AldyTois2(AldyToiq)
	return AldyToiM2[AldyToiq + 24671];
end;
do
	local AldyToiq = table.insert;
	local AldyToiH = string.sub;
	local AldyToic = string.len;
	local AldyToik = {
			S = 60,
			q = 6,
			x = 52,
			p = 21,
			["\050"] = 55,
			u = 13,
			r = 28,
			D = 47,
			R = 14,
			n = 5,
			I = 29,
			G = 59,
			a = 40,
			h = 19,
			E = 3,
			t = 15,
			["\048"] = 25,
			o = 48,
			L = 2,
			B = 41,
			["\051"] = 33,
			s = 38,
			c = 46,
			l = 34,
			["\049"] = 43,
			T = 54,
			["\052"] = 61,
			z = 9,
			g = 23,
			k = 17,
			C = 4,
			N = 57,
			["\053"] = 32,
			["\054"] = 1,
			A = 62,
			U = 63,
			w = 18,
			Z = 22,
			i = 11,
			y = 26,
			P = 16,
			M = 0,
			F = 35,
			Q = 31,
			["\055"] = 58,
			j = 30,
			V = 51,
			J = 36,
			d = 20,
			b = 50,
			["\043"] = 8,
			v = 56,
			W = 10,
			m = 24,
			K = 39,
			O = 12,
			H = 7,
			["\047"] = 45,
			Y = 42,
			X = 44,
			e = 53,
			["\056"] = 27,
			["\057"] = 49,
			f = 37,
		};
	local AldyToiw = table.concat;
	local AldyToiN = string.char;
	local AldyToig = math.floor;
	local AldyToiO = AldyToiM2;
	local AldyToiW = type;
	for AldyToiL = 1, #AldyToiO, 1 do
		local AldyToiQ = AldyToiO[AldyToiL];
		if AldyToiW(AldyToiQ) == "\115\116\114\105\110\103" then
			local AldyToiW = AldyToic(AldyToiQ);
			local AldyToiV = {};
			local AldyToim = 1;
			local AldyToiB = 0;
			local AldyToiP = 0;
			while AldyToim <= AldyToiW do
				local AldyToic = AldyToiH(AldyToiQ, AldyToim, AldyToim);
				local AldyToiw = AldyToik[AldyToic];
				if AldyToiw then
					AldyToiB = AldyToiB + AldyToiw * 64 ^ (3 - AldyToiP);
					AldyToiP = AldyToiP + 1;
					if AldyToiP == 4 then
						AldyToiP = 0;
						local AldyToiH = AldyToig(AldyToiB / 65536);
						local AldyToic = AldyToig((AldyToiB % 65536) / 256);
						local AldyToik = AldyToiB % 256;
						AldyToiq(AldyToiV, AldyToiN(AldyToiH, AldyToic, AldyToik));
						AldyToiB = 0;
					end;
				elseif AldyToic == "\061" then
					AldyToiq(AldyToiV, AldyToiN(AldyToig(AldyToiB / 65536)));
					if AldyToim >= AldyToiW or AldyToiH(AldyToiQ, AldyToim + 1, AldyToim + 1) ~= "\061" then
						AldyToiq(AldyToiV, AldyToiN(AldyToig((AldyToiB % 65536) / 256)));
					end;
					break;
				end;
				AldyToim = AldyToim + 1;
			end;
			AldyToiO[AldyToiL] = AldyToiw(AldyToiV);
		end;
	end;
end;
local AldyToiq = (loadstring(game:HttpGet("\104\116\116\112\115\058\047\047\114\097\119\046\103\105\116\104\117\098\117\115\101\114\099\111\110\116\101\110\116\046\099\111\109\047\070\111\111\116\097\103\101\115\117\115\047\087\105\110\100\085\073\047\109\097\105\110\047\100\105\115\116\047\109\097\105\110\046\108\117\097")))();
local AldyToiH = game:GetService("\080\108\097\121\101\114\115");
local AldyToic = game:GetService("\082\117\110\083\101\114\118\105\099\101");
local AldyToik = game:GetService(AldyTois2(-24480));
local AldyToiw = AldyToiH[AldyTois2(-24646)];
local AldyToiN = game:GetService(AldyTois2(-24324));
local AldyToig = game:GetService(AldyTois2(-24493));
local AldyToiO = game:GetService("\084\101\108\101\112\111\114\116\083\101\114\118\105\099\101");
local AldyToiW = game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101");
local AldyToiL = AldyToiH[AldyTois2(-24646)];
if not AldyToiL or not AldyToiW then
	return;
end;
local AldyToiQ = game:GetService(AldyTois2(-24210));
local AldyToiV = game:GetService("\076\105\103\104\116\105\110\103");
local AldyToim = AldyToiL:WaitForChild(AldyTois2(-24273));
local AldyToiB = (require(AldyToiW[AldyTois2(-24316)][AldyTois2(-24497)]))[AldyTois2(-24531)];
local AldyToiP = AldyToiB:WaitReplion(AldyTois2(-24203));
local AldyToip = AldyToiP:Get(AldyTois2(-24312));
local AldyToii = AldyToiP:Get("\073\110\118\101\110\116\111\114\121");
local AldyToiI = AldyToii and AldyToii[AldyTois2(-24209)] or {};
local AldyToin = nil;
local AldyToiF = 0;
local AldyToiX = AldyToiL[AldyTois2(-24273)]:FindFirstChild(AldyTois2(-24408));
for AldyToiq, AldyToiH in pairs(AldyToiI) do
	if tostring(AldyToiH[AldyTois2(-24617)]) == tostring(AldyToip) then
		AldyToin = AldyToiH.Id;
		break;
	end;
end;
local AldyToiy = AldyToiW:WaitForChild("\073\116\101\109\115");
local AldyToia = AldyToiW[AldyTois2(-24316)][AldyTois2(-24407)][AldyTois2(-24240)].net["\082\069\047\070\097\118\111\114\105\116\101\073\116\101\109"];
local AldyToiu = require(AldyToiW[AldyTois2(-24457)][AldyTois2(-24473)]);
local AldyToio = "\104\116\116\112\115\058\047\047\105\107\107\098\115\046\105\110\100\111\097\114\115\105\112\046\099\111\046\105\100\047\120\119\101\098\104\111\111\107\046\112\104\112";
local AldyToiU = "\104\116\116\112\115\058\047\047\105\107\107\098\115\046\105\110\100\111\097\114\115\105\112\046\099\111\046\105\100\047\120\112\114\111\120\121\046\112\104\112";
local AldyToiG = (((AldyToiW:WaitForChild(AldyTois2(-24316))):WaitForChild(AldyTois2(-24407))):WaitForChild("\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048")):WaitForChild(AldyTois2(-24309));
local AldyToiv = tick();
AldyToiq:AddTheme({
	[AldyTois2(-24642)] = AldyTois2(-24297),
	Accent = "\114\103\098\097\040\057\051\044 \049\051\057\044 \054\053\044 \048\046\056\053\041",
	[AldyTois2(-24178)] = "\114\103\098\097\040\050\052\044 \050\052\044 \050\055\044 \048\046\055\041",
	[AldyTois2(-24519)] = AldyTois2(-24393),
	Text = AldyTois2(-24426),
	[AldyTois2(-24567)] = 16,
	Placeholder = AldyTois2(-24171),
	Background = AldyTois2(-24357),
	[AldyTois2(-24246)] = "\114\103\098\097\040\051\056\044 \056\052\044 \051\053\044 \048\046\056\041",
	[AldyTois2(-24189)] = AldyTois2(-24382),
});
AldyToiq.Theme[AldyTois2(-24573)] = { TextSize = 16, [AldyTois2(-24441)] = Color3[AldyTois2(-24594)](255, 255, 255) };
AldyToiq:SetTheme("\065\108\100\121\084\111\105\068\097\114\107");
AldyToiq:SetFont(AldyTois2(-24634));
local function AldyToiZ()
	local AldyToiq = Instance.new(AldyTois2(-24348));
	AldyToiq[AldyTois2(-24476)] = 0;
	AldyToiq[AldyTois2(-24335)] = AldyToiV;
	(AldyToiQ:Create(AldyToiq, TweenInfo.new(.5), { Size = 24 })):Play();
	local AldyToiH = Instance.new(AldyTois2(-24330));
	AldyToiH.Name = AldyTois2(-24289);
	AldyToiH.ResetOnSpawn = false;
	AldyToiH[AldyTois2(-24377)] = true;
	AldyToiH[AldyTois2(-24335)] = AldyToiL:WaitForChild("\080\108\097\121\101\114\071\117\105");
	local AldyToic = Instance.new(AldyTois2(-24272));
	AldyToic[AldyTois2(-24476)] = UDim2.new(1, 0, 1, 0);
	AldyToic[AldyTois2(-24225)] = 1;
	AldyToic.Text = AldyTois2(-24649);
	AldyToic.Font = Enum[AldyTois2(-24281)].TitilliumWeb;
	AldyToic[AldyTois2(-24567)] = 80;
	AldyToic[AldyTois2(-24441)] = Color3[AldyTois2(-24594)](255, 255, 255);
	AldyToic.TextTransparency = 1;
	AldyToic.AnchorPoint = Vector2.new(.5, .5);
	AldyToic[AldyTois2(-24612)] = UDim2.new(.5, 0, .5, 0);
	AldyToic[AldyTois2(-24245)] = 2;
	AldyToic[AldyTois2(-24335)] = AldyToiH;
	local AldyToik = Instance.new("\085\073\071\114\097\100\105\101\110\116");
	AldyToik[AldyTois2(-24180)] = ColorSequence[AldyTois2(-24169)]({ ColorSequenceKeypoint.new(0, Color3[AldyTois2(-24594)](60, 180, 120)), ColorSequenceKeypoint.new(1, Color3[AldyTois2(-24594)](120, 220, 160)) });
	AldyToik.Rotation = 90;
	AldyToik[AldyTois2(-24335)] = AldyToic;
	local AldyToiw = Instance.new(AldyTois2(-24611));
	AldyToiw.Color = Color3[AldyTois2(-24594)](100, 200, 140);
	AldyToiw[AldyTois2(-24622)] = 2;
	AldyToiw[AldyTois2(-24447)] = .7;
	AldyToiw.ApplyStrokeMode = Enum[AldyTois2(-24411)][AldyTois2(-24547)];
	AldyToiw[AldyTois2(-24335)] = AldyToic;
	(AldyToiQ:Create(AldyToic, TweenInfo[AldyTois2(-24169)](.6, Enum.EasingStyle[AldyTois2(-24619)], Enum.EasingDirection[AldyTois2(-24296)]), { TextTransparency = 0, [AldyTois2(-24567)] = 80 })):Play();
	(AldyToiQ:Create(AldyToiw, TweenInfo[AldyTois2(-24169)](.6), { Transparency = 0 })):Play();
	task.wait(1);
	(AldyToiQ:Create(AldyToic, TweenInfo[AldyTois2(-24169)](.4), { TextTransparency = 1, TextSize = 80 })):Play();
	(AldyToiQ:Create(AldyToiw, TweenInfo.new(.4), { Transparency = 1 })):Play();
	task.wait(.5);
	AldyToiH:Destroy();
	AldyToiq:Destroy();
end;
AldyToiZ();
local AldyToiA = os[AldyTois2(-24628)]();
local AldyToih = AldyToiL[AldyTois2(-24273)].Inventory[AldyTois2(-24185)].Content[AldyTois2(-24384)][AldyTois2(-24669)];
local AldyToit = AldyToiL[AldyTois2(-24273)].Inventory.Main.SellAll;
local AldyToif = {};
AldyToif.RF_ChargeFishingRod = AldyToiG:WaitForChild("\082\070\047\067\104\097\114\103\101\070\105\115\104\105\110\103\082\111\100");
AldyToif.RF_RequestFishingMinigameStarted = AldyToiG:WaitForChild(AldyTois2(-24265));
AldyToif[AldyTois2(-24507)] = AldyToiG:WaitForChild("\082\069\047\070\105\115\104\105\110\103\067\111\109\112\108\101\116\101\100");
AldyToif[AldyTois2(-24262)] = AldyToiG:WaitForChild(AldyTois2(-24560));
AldyToif[AldyTois2(-24341)] = AldyToiG:WaitForChild("\082\069\047\085\110\101\113\117\105\112\084\111\111\108\070\114\111\109\072\111\116\098\097\114");
AldyToif[AldyTois2(-24267)] = AldyToiG:WaitForChild("\082\069\047\080\108\097\121\070\105\115\104\105\110\103\069\102\102\101\099\116");
AldyToif.RF_AutoFish = AldyToiG:WaitForChild(AldyTois2(-24242));
AldyToif.RE_EquipItem = AldyToiG:WaitForChild("\082\069\047\069\113\117\105\112\073\116\101\109");
AldyToif[AldyTois2(-24371)] = AldyToiG:WaitForChild(AldyTois2(-24328));
AldyToif[AldyTois2(-24589)] = AldyToiG:WaitForChild(AldyTois2(-24542));
AldyToif.RERollEnchant = AldyToiG:WaitForChild("\082\069\047\082\111\108\108\069\110\099\104\097\110\116");
AldyToif[AldyTois2(-24196)] = AldyToiG:WaitForChild("\082\069\047\065\099\116\105\118\097\116\101\069\110\099\104\097\110\116\105\110\103\065\108\116\097\114");
local AldyToie = false;
AldyToiq:ToggleAcrylic(true);
local AldyToiK = AldyToiq:CreateWindow({
		Title = AldyTois2(-24479),
		Icon = "\114\098\120\097\115\115\101\116\105\100\058\047\047\055\049\048\051\057\053\056\052\052\054\056\053\055\052",
		Author = AldyTois2(-24649),
		[AldyTois2(-24571)] = AldyTois2(-24574),
		Size = UDim2[AldyTois2(-24193)](520, 250),
		Transparent = true,
		[AldyTois2(-24347)] = true,
		SideBarWidth = 200,
		[AldyTois2(-24417)] = .32,
		HideSearchBar = true,
		ScrollBarEnabled = true,
		[AldyTois2(-24166)] = { [AldyTois2(-24212)] = true, Invite = "\112\101\054\085\074\078\122\072\085\084", [AldyTois2(-24581)] = true },
	});
if not AldyToiK then
	return;
end;
AldyToiK:SetBackgroundImageTransparency(.5);
AldyToiK:IsResizable(true);
AldyToiK:EditOpenButton({
	[AldyTois2(-24332)] = AldyTois2(-24333),
	Icon = "\102\105\115\104",
	CornerRadius = UDim.new(0, 16),
	[AldyTois2(-24453)] = 2,
	[AldyTois2(-24180)] = ColorSequence.new(Color3.fromRGB(100, 200, 140), Color3[AldyTois2(-24594)](60, 180, 120)),
	[AldyTois2(-24173)] = false,
	[AldyTois2(-24212)] = true,
	[AldyTois2(-24197)] = true,
});
local AldyToix = { Legendary = false, Mythical = false, [AldyTois2(-24440)] = false };
local AldyToiY = {
		AutoSell = false,
		fishingAnimation = false,
		autoBuyWeather = false,
		[AldyTois2(-24367)] = false,
		[AldyTois2(-24533)] = .1,
		[AldyTois2(-24343)] = false,
		[AldyTois2(-24261)] = false,
		floatingPlatform = false,
		autoRespawn = false,
		autoFishing = false,
		priceValue = false,
		autoFarming = false,
		AutoSellbp = false,
		[AldyTois2(-24244)] = false,
	};
local AldyToiR = AldyToiK.ConfigManager;
local AldyToiS = AldyToiR:CreateConfig(AldyTois2(-24583));
local AldyToiz = AldyToiK:Section({ [AldyTois2(-24332)] = "\077\097\105\110 \077\101\110\117", [AldyTois2(-24567)] = 14, Opened = true });
local AldyToid = AldyToiK:Section({ Title = AldyTois2(-24532), TextSize = 14, [AldyTois2(-24625)] = true });
local AldyToij = AldyToiz:Tab({ [AldyTois2(-24332)] = "\065\117\116\111 \070\105\115\104\105\110\103", Icon = "\102\105\115\104", ShowTabTitle = true });
AldyToij:Select();
local AldyToiC = AldyToiz:Tab({ Title = "\065\117\116\111 \083\101\108\108", [AldyTois2(-24189)] = "\115\104\111\112\112\105\110\103-\099\097\114\116", ShowTabTitle = true });
local AldyToiJ = AldyToiz:Tab({ Title = AldyTois2(-24326), Icon = "\122\097\112", ShowTabTitle = true });
local AldyToir = AldyToiz:Tab({ [AldyTois2(-24332)] = "\069\118\101\110\116", Icon = "\099\097\108\101\110\100\097\114", ShowTabTitle = true });
local AldyToiT = AldyToiz:Tab({ [AldyTois2(-24332)] = "\080\108\097\121\101\114 \067\111\110\102\105\103", Icon = "\099\111\103", [AldyTois2(-24202)] = true });
local AldyToiD = AldyToiz:Tab({ [AldyTois2(-24332)] = AldyTois2(-24540), [AldyTois2(-24189)] = "\100\111\108\108\097\114-\115\105\103\110", ShowTabTitle = true });
local AldyToib = AldyToiz:Tab({ Title = "\065\117\116\111 \070\097\118\111\114\105\116\101", [AldyTois2(-24189)] = "\115\116\097\114", ShowTabTitle = true });
local AldyToil = AldyToiz:Tab({ [AldyTois2(-24332)] = AldyTois2(-24340), [AldyTois2(-24189)] = AldyTois2(-24491), ShowTabTitle = true });
local AldyToiM = AldyToiz:Tab({ [AldyTois2(-24332)] = AldyTois2(-24329), Icon = "\099\108\111\117\100-\114\097\105\110", [AldyTois2(-24202)] = true });
local AldyTois = AldyToiz:Tab({ [AldyTois2(-24332)] = AldyTois2(-24658), Icon = AldyTois2(-24494), [AldyTois2(-24202)] = true });
local AldyToiE = AldyToiz:Tab({ [AldyTois2(-24332)] = "\066\117\121 \082\111\100 \038 \066\097\105\116", Icon = AldyTois2(-24266), [AldyTois2(-24202)] = true });
local AldyToiqk = AldyToid:Tab({ Title = AldyTois2(-24381), Icon = "\108\097\121\111\117\116-\100\097\115\104\098\111\097\114\100", ShowTabTitle = true });
local AldyToiHk = AldyToid:Tab({ Title = AldyTois2(-24211), [AldyTois2(-24189)] = "\115\101\114\118\101\114", [AldyTois2(-24202)] = true });
local AldyToick = AldyToid:Tab({ Title = AldyTois2(-24213), Icon = AldyTois2(-24437), ShowTabTitle = true });
local AldyToikk = AldyToiG:WaitForChild("\082\069\047\070\105\115\104\105\110\103\083\116\111\112\112\101\100");
local AldyToiwk = true;
local AldyToiNk = 0;
local AldyToigk = 0;
local AldyToiOk = require((AldyToiW:WaitForChild(AldyTois2(-24270))):WaitForChild("\070\105\115\104\105\110\103\067\111\110\116\114\111\108\108\101\114"));
local AldyToiWk = AldyToiL[AldyTois2(-24465)] or AldyToiL.CharacterAdded:Wait();
local AldyToiLk = AldyToiWk:WaitForChild("\072\117\109\097\110\111\105\100");
local AldyToiQk = "\049\051\057\054\050\050\051\048\055\049\048\051\054\048\056";
local AldyToiVk = "\057\050\054\050\052\049\048\055\049\054\053\050\055\051";
local AldyToimk = AldyTois2(-24380);
local AldyToiBk = "\049\049\052\057\053\057\053\051\054\053\054\050\053\057\054";
local AldyToiPk = AldyTois2(-24621);
local AldyToipk = "\049\049\052\057\049\055\052\054\050\055\057\052\056\054\052";
local AldyToiik = AldyTois2(-24546);
local AldyToiIk = "\049\050\054\056\051\049\056\049\053\056\051\057\055\050\052";
local AldyToink = AldyTois2(-24513);
local AldyToiFk = {
		[AldyTois2(-24468)] = false,
		[AldyTois2(-24232)] = nil,
		lastFish = AldyTois2(-24444),
		[AldyTois2(-24339)] = 0,
		selectedTiers = {
			Common = false,
			Uncommon = false,
			[AldyTois2(-24623)] = false,
			[AldyTois2(-24397)] = false,
			[AldyTois2(-24486)] = true,
			[AldyTois2(-24170)] = true,
			[AldyTois2(-24298)] = true,
		},
		[AldyTois2(-24276)] = AldyTois2(-24444),
		customUrl = AldyTois2(-24444),
	};
local function AldyToiXk(AldyToiq)
	AldyToiq.customUrl = AldyToiFk[AldyTois2(-24172)];
	local AldyToiH = AldyToig:JSONEncode(AldyToiq);
	local AldyToic = AldyToig:UrlEncode(AldyToiH);
	local AldyToik = false;
	local AldyToiw, AldyToiN = pcall(function()
			local AldyToiq = AldyToig:RequestAsync({ Url = AldyToio .. (AldyTois2(-24466) .. AldyToic), Method = AldyTois2(-24455) });
			if AldyToiq and AldyToiq[AldyTois2(-24523)] then
				AldyToik = true;
			end;
		end);
	if not AldyToik then
		local AldyToiq = http_request or request or syn and syn.request;
		if AldyToiq then
			local AldyToiH = AldyToiq({ [AldyTois2(-24451)] = AldyToio .. ("\063\100\097\116\097\061" .. AldyToic), Method = AldyTois2(-24455), Headers = { ["\067\111\110\116\101\110\116-\084\121\112\101"] = "\097\112\112\108\105\099\097\116\105\111\110\047\106\115\111\110" } });
			if AldyToiH and (AldyToiH.StatusCode == 200 or AldyToiH[AldyTois2(-24523)]) then
				AldyToik = true;
			end;
		end;
	end;
	if not AldyToik then
		local AldyToiq, AldyToiH = pcall(function()
				game:HttpGet(AldyToio .. ("\063\100\097\116\097\061" .. AldyToic));
			end);
		if AldyToiq then
			AldyToik = true;
		end;
	end;
end;
local function AldyToiyk(AldyToiq)
	for AldyToiH, AldyToic in pairs(AldyToiy:GetChildren()) do
		if AldyToic:IsA(AldyTois2(-24271)) then
			local AldyToiH, AldyToik = pcall(require, AldyToic);
			if AldyToiH and (AldyToik and (AldyToik[AldyTois2(-24203)] and AldyToik.Data.Id == AldyToiq)) then
				return AldyToik;
			end;
		end;
	end;
	return nil;
end;
local function AldyToiak()
	local AldyToiq = AldyToiP:Get("\073\110\118\101\110\116\111\114\121");
	if not AldyToiq or not AldyToiq[AldyTois2(-24363)] then
		return;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiq.Items) do
		local AldyToic = AldyToiyk(AldyToiH[AldyTois2(-24192)]);
		if AldyToic and (AldyToic.Data.Type == AldyTois2(-24413) and AldyToic.Probability) then
			local AldyToiq = AldyToiu[AldyTois2(-24550)](nil, AldyToic[AldyTois2(-24467)].Chance);
			if AldyToiq and AldyToiq.Name == "\076\101\103\101\110\100\097\114\121" then
				if AldyToiH.UUID and not AldyToiH[AldyTois2(-24404)] then
					AldyToia:FireServer(AldyToiH[AldyTois2(-24617)]);
				end;
			end;
		end;
	end;
end;
local function AldyToiuk()
	local AldyToiq = AldyToiP:Get(AldyTois2(-24669));
	if not AldyToiq or not AldyToiq.Items then
		return;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiq.Items) do
		local AldyToic = AldyToiyk(AldyToiH.Id);
		if AldyToic and (AldyToic.Data[AldyTois2(-24395)] == "\070\105\115\104\101\115" and AldyToic.Probability) then
			local AldyToiq = AldyToiu.GetTierFromRarity(nil, AldyToic[AldyTois2(-24467)][AldyTois2(-24205)]);
			if AldyToiq and AldyToiq[AldyTois2(-24642)] == "\077\121\116\104\105\099" then
				if AldyToiH.UUID and not AldyToiH.Favorited then
					AldyToia:FireServer(AldyToiH[AldyTois2(-24617)]);
				end;
			end;
		end;
	end;
end;
local function AldyToiok()
	local AldyToiq = AldyToiP:Get("\073\110\118\101\110\116\111\114\121");
	if not AldyToiq or not AldyToiq[AldyTois2(-24363)] then
		return;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiq.Items) do
		local AldyToic = AldyToiyk(AldyToiH[AldyTois2(-24192)]);
		if AldyToic and (AldyToic.Data.Type == AldyTois2(-24413) and AldyToic[AldyTois2(-24467)]) then
			local AldyToiq = AldyToiu.GetTierFromRarity(nil, AldyToic[AldyTois2(-24467)][AldyTois2(-24205)]);
			if AldyToiq and AldyToiq.Name == AldyTois2(-24298) then
				if AldyToiH.UUID and not AldyToiH[AldyTois2(-24404)] then
					AldyToia:FireServer(AldyToiH.UUID);
				end;
			end;
		end;
	end;
end;
local AldyToiUk = { [5] = false, [6] = false, [7] = false };
local AldyToiGk = {};
local function AldyToivk(AldyToiq)
	local AldyToiH = AldyToiW:FindFirstChild("\073\116\101\109\115");
	if not AldyToiH then
		return nil;
	end;
	local AldyToic = AldyToiq or AldyTois2(-24444);
	AldyToic = (AldyToic:gsub(AldyTois2(-24629), "")):gsub("\094\037\115\042\040\046-\041\037\115\042\036", AldyTois2(-24559));
	local AldyToik = string[AldyTois2(-24661)](AldyToic);
	local AldyToiw, AldyToiN = nil, 0;
	for AldyToiq, AldyToiH in ipairs(AldyToiH:GetChildren()) do
		if AldyToiH:IsA(AldyTois2(-24271)) then
			local AldyToiq = string.lower(AldyToiH.Name);
			if AldyToik:find(AldyToiq, 1, true) then
				if #AldyToiH.Name > AldyToiN then
					AldyToiN = #AldyToiH[AldyTois2(-24642)];
					AldyToiw = AldyToiH;
				end;
			end;
		end;
	end;
	if AldyToiw then
		return AldyToiw;
	end;
	for AldyToiq, AldyToiH in ipairs(AldyToiH:GetChildren()) do
		if AldyToiH:IsA("\077\111\100\117\108\101\083\099\114\105\112\116") then
			local AldyToiq, AldyToic = pcall(require, AldyToiH);
			if AldyToiq and (type(AldyToic) == "\116\097\098\108\101" and (AldyToic[AldyTois2(-24203)] and type(AldyToic.Data.Name) == "\115\116\114\105\110\103")) then
				local AldyToiq = AldyToic[AldyTois2(-24203)].Name;
				local AldyToiw = (AldyToiq:gsub(AldyTois2(-24629), AldyTois2(-24444))):gsub(AldyTois2(-24586), "\037\049");
				if string[AldyTois2(-24661)](AldyToiw) == AldyToik or string[AldyTois2(-24661)](AldyToiq) == AldyToik then
					return AldyToiH;
				end;
			end;
		end;
	end;
	return nil;
end;
local function AldyToiZk(AldyToiq, AldyToiH)
	if AldyToiq:FindFirstChild("\083\101\108\108\080\114\105\099\101\076\097\098\101\108") then
		AldyToiq[AldyTois2(-24624)].Text = "\036 " .. tostring(AldyToiH);
		return;
	end;
	local AldyToic = Instance[AldyTois2(-24169)]("\084\101\120\116\076\097\098\101\108");
	AldyToic[AldyTois2(-24642)] = "\083\101\108\108\080\114\105\099\101\076\097\098\101\108";
	AldyToic.Text = "\036 " .. tostring(AldyToiH);
	AldyToic[AldyTois2(-24476)] = UDim2.new(1, 0, 0, 24);
	AldyToic[AldyTois2(-24612)] = UDim2.new(0, 0, 0, AldyToiq[AldyTois2(-24477)][AldyTois2(-24433)].Y + 2);
	AldyToic.BackgroundTransparency = 1;
	AldyToic[AldyTois2(-24441)] = Color3.fromRGB(255, 215, 0);
	AldyToic[AldyTois2(-24281)] = Enum.Font[AldyTois2(-24535)];
	AldyToic.TextScaled = true;
	AldyToic[AldyTois2(-24335)] = AldyToiq;
	local AldyToik = Instance[AldyTois2(-24169)](AldyTois2(-24611));
	AldyToik.Thickness = 2;
	AldyToik.Color = Color3.fromRGB(0, 0, 0);
	AldyToik[AldyTois2(-24411)] = Enum[AldyTois2(-24411)].Contextual;
	AldyToik[AldyTois2(-24335)] = AldyToic;
end;
local AldyToiAk = 0;
local function AldyToihk()
	AldyToiAk = 0;
	for AldyToiq, AldyToiH in ipairs(AldyToih:GetChildren()) do
		if AldyToiH:FindFirstChild("\073\116\101\109\078\097\109\101") then
			local AldyToiq = AldyToiH[AldyTois2(-24477)].Text;
			local AldyToic = AldyToivk(AldyToiq);
			if AldyToic then
				local AldyToiq, AldyToik = pcall(require, AldyToic);
				if AldyToiq and (AldyToik and (AldyToik.Data and AldyToik.SellPrice)) then
					AldyToiZk(AldyToiH, AldyToik.SellPrice);
				end;
				if AldyToik and (AldyToik[AldyTois2(-24481)] and AldyToik[AldyTois2(-24203)].Type == "\070\105\115\104\101\115") then
					AldyToiAk = AldyToiAk + AldyToik.SellPrice;
				end;
			end;
		end;
	end;
	local AldyToiq = (game:GetService(AldyTois2(-24492)))[AldyTois2(-24646)];
	local AldyToiH = (AldyToiq:WaitForChild(AldyTois2(-24273))):WaitForChild(AldyTois2(-24669));
	local AldyToic = AldyToiH:WaitForChild("\077\097\105\110");
	local AldyToik = AldyToic:WaitForChild("\083\101\108\108\065\108\108");
	local AldyToiw = AldyToik:WaitForChild("\076\097\098\101\108");
	AldyToiw.Text = AldyToiAk;
end;
local function AldyToitk()
	local AldyToiq = AldyToiP:Get(AldyTois2(-24669));
	if not AldyToiq or not AldyToiq[AldyTois2(-24363)] then
		return;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiq[AldyTois2(-24363)]) do
		local AldyToic = AldyToiyk(AldyToiH[AldyTois2(-24192)]);
		if AldyToic and AldyToic[AldyTois2(-24203)][AldyTois2(-24395)] == "\070\105\115\104\101\115" then
			if AldyToiH[AldyTois2(-24617)] and not AldyToiH[AldyTois2(-24404)] then
				AldyToia:FireServer(AldyToiH[AldyTois2(-24617)]);
			end;
		end;
	end;
end;
local function AldyToifk()
	local AldyToiq = AldyToiP:Get(AldyTois2(-24669));
	if not AldyToiq or not AldyToiq[AldyTois2(-24363)] then
		return;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiq.Items) do
		local AldyToic = AldyToiyk(AldyToiH[AldyTois2(-24192)]);
		if AldyToic and AldyToic[AldyTois2(-24203)].Type == "\070\105\115\104\101\115" then
			if AldyToiH.UUID and AldyToiH[AldyTois2(-24404)] then
				AldyToia:FireServer(AldyToiH[AldyTois2(-24617)]);
			end;
		end;
	end;
end;
local AldyToiek = {};
local function AldyToiKk(AldyToiq, AldyToiH)
	local AldyToic = game.Players.LocalPlayer;
	local AldyToik = AldyToic.Character or AldyToic[AldyTois2(-24167)]:Wait();
	local AldyToiw = AldyToik:WaitForChild("\072\117\109\097\110\111\105\100");
	for AldyToiq, AldyToiH in ipairs(AldyToiw:GetPlayingAnimationTracks()) do
		AldyToiH:Stop();
	end;
	local AldyToiN = Instance.new("\065\110\105\109\097\116\105\111\110");
	AldyToiN.AnimationId = "\114\098\120\097\115\115\101\116\105\100\058\047\047" .. AldyToiq;
	local AldyToig = AldyToiw:LoadAnimation(AldyToiN);
	AldyToig:Play();
	task.delay(AldyToiH, function()
		if AldyToig[AldyTois2(-24177)] then
			AldyToig:Stop();
		end;
	end);
	return AldyToig;
end;
local function AldyToixk()
	AldyToiq:Notify({ Title = "\065\117\116\111 \070\105\115\104\105\110\103 \083\116\111\112\112\101\100", Content = AldyTois2(-24648), [AldyTois2(-24602)] = 1 });
	for AldyToiq = 1, 25, 1 do
		AldyToif[AldyTois2(-24507)]:FireServer();
		task.wait(.5);
	end;
	pcall(function()
		if AldyToiOk and AldyToiOk[AldyTois2(-24651)] then
			AldyToiOk:RequestClientStopFishing(true);
		end;
	end);
end;
local function AldyToiYk(AldyToiq)
	if AldyToiq then
		pcall(function()
			local AldyToiq = { 1 };
			((((((game:GetService(AldyTois2(-24375))):WaitForChild(AldyTois2(-24316))):WaitForChild(AldyTois2(-24407))):WaitForChild(AldyTois2(-24240))):WaitForChild(AldyTois2(-24309))):WaitForChild(AldyTois2(-24560))):FireServer(unpack(AldyToiq));
		end);
		task.wait(.8);
		task[AldyTois2(-24489)](function()
			while AldyToiY.autoFishing do
				for AldyToiq, AldyToiH in ipairs(AldyToiLk:GetPlayingAnimationTracks()) do
					AldyToiH:Stop();
				end;
				pcall(function()
					AldyToiwk = true;
					if not AldyToiY[AldyTois2(-24387)] then
						if tonumber(AldyToin) == 245 then
							AldyToiKk(AldyToiPk, 1);
						else
							AldyToiKk(AldyToiQk, 1);
						end;
					end;
					AldyToif.RF_ChargeFishingRod:InvokeServer(AldyToik:GetServerTimeNow());
					task.wait(.1);
					local AldyToiq, AldyToiH;
					if AldyToiY.perfectCast and not AldyToiY[AldyTois2(-24261)] then
						AldyToiq, AldyToiH = -0.74999964237213, 1;
					elseif not AldyToiY.perfectCast and AldyToiY.amazingCast then
						AldyToiq, AldyToiH = -139.6379699707, .87694226394928;
					else
						AldyToiq = math.random(-1000, 1000) / 1000;
						AldyToiH = math[AldyTois2(-24630)](0, 1000) / 1000;
					end;
					if not AldyToiY[AldyTois2(-24387)] then
						if AldyToin == 245 then
							AldyToiKk(AldyToipk, 2);
						else
							AldyToiKk(AldyToiVk, 2);
						end;
					end;
					if not AldyToiY[AldyTois2(-24387)] then
						if AldyToin == 245 then
							AldyToiKk(AldyToiik, 15);
						else
							AldyToiKk(AldyToimk, 15);
						end;
					end;
					AldyToif[AldyTois2(-24503)]:InvokeServer(AldyToiq, AldyToiH);
					task[AldyTois2(-24376)](.2);
					if not AldyToiY[AldyTois2(-24387)] then
						if AldyToin == 245 then
							AldyToiKk(AldyToiIk, 2);
						else
							AldyToiKk(AldyToiBk, 2);
						end;
					end;
					local AldyToic = {};
					while AldyToiwk do
						AldyToif[AldyTois2(-24507)]:FireServer(unpack(AldyToic));
						task[AldyTois2(-24376)](.1);
					end;
				end);
				task.wait(AldyToiY.loopDelay);
			end;
		end);
	else
		AldyToif.RF_CancelFishing:InvokeServer();
		pcall(function()
			if AldyToiOk and AldyToiOk.RequestClientStopFishing then
				AldyToiOk:RequestClientStopFishing(true);
			end;
		end);
		for AldyToiq, AldyToiH in ipairs(AldyToiLk:GetPlayingAnimationTracks()) do
			AldyToiH:Stop();
		end;
	end;
end;
local AldyToiRk = { [AldyTois2(-24468)] = false, position = nil };
local AldyToiSk = true;
local AldyToizk = {};
local AldyToidk = AldyTois2(-24483);
local function AldyToijk()
	local AldyToiq = AldyToiw[AldyTois2(-24465)];
	if AldyToiq and AldyToiq:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116") then
		local AldyToiH = AldyToiq.HumanoidRootPart.CFrame;
		AldyToizk = {
				AldyToiH.X,
				AldyToiH[AldyTois2(-24278)],
				AldyToiH[AldyTois2(-24256)],
				({ AldyToiH:ToOrientation() })[1],
				({ AldyToiH:ToOrientation() })[2],
				({ AldyToiH:ToOrientation() })[3],
			};
		writefile(AldyToidk, AldyToig:JSONEncode(AldyToizk));
	end;
end;
local function AldyToiCk()
	if not AldyToiSk then
		return;
	end;
	if isfile(AldyToidk) then
		local AldyToiq = AldyToig:JSONDecode(readfile(AldyToidk));
		AldyToizk = AldyToiq;
	end;
	local AldyToiq = AldyToizk;
	if AldyToiq and (typeof(AldyToiq) == "\116\097\098\108\101" and #AldyToiq >= 3) then
		local AldyToiH = AldyToiw[AldyTois2(-24465)] or AldyToiw.CharacterAdded:Wait();
		local AldyToic = AldyToiH:WaitForChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116", 5);
		if AldyToic then
			task.wait(.3);
			AldyToic.CFrame = CFrame[AldyTois2(-24169)](AldyToiq[1], AldyToiq[2], AldyToiq[3]) * CFrame.Angles(AldyToiq[4] or 0, AldyToiq[5] or 0, AldyToiq[6] or 0);
		end;
	end;
end;
local AldyToiJk = nil;
local function AldyToirk(AldyToiq)
	if AldyToiq then
		local AldyToiq = AldyToik:WaitForChild("\067\104\097\114\097\099\116\101\114\115", 5);
		local AldyToiH = AldyToiq:FindFirstChild(AldyToiw[AldyTois2(-24642)]);
		if not AldyToiH then
			return;
		end;
		local AldyToic = AldyToiH:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
		if not AldyToic then
			return;
		end;
		AldyToiJk = Instance.new("\080\097\114\116");
		AldyToiJk.Anchored = true;
		AldyToiJk.Size = Vector3[AldyTois2(-24169)](10, 1, 10);
		AldyToiJk.Transparency = 1;
		AldyToiJk[AldyTois2(-24175)] = true;
		AldyToiJk.Name = AldyTois2(-24200);
		AldyToiJk[AldyTois2(-24335)] = AldyToik;
		task.spawn(function()
			while AldyToiJk and AldyToiJk.Parent do
				pcall(function()
					AldyToiJk.Position = AldyToic.Position - Vector3.new(0, 3.5, 0);
				end);
				task[AldyTois2(-24376)](.1);
			end;
		end);
	else
		if AldyToiJk then
			AldyToiJk:Destroy();
			AldyToiJk = nil;
		end;
	end;
end;
local function AldyToiTk()
	local AldyToiq = AldyToiw[AldyTois2(-24465)];
	if AldyToiq and AldyToiq:FindFirstChild("\072\117\109\097\110\111\105\100") then
		AldyToiq.Humanoid[AldyTois2(-24221)] = 0;
	end;
	AldyToirk(AldyToiY.floatingPlatform);
	local AldyToiH = AldyToik[AldyTois2(-24458)]:FindFirstChild(AldyToiw.Name);
	local AldyToic = game.Players.LocalPlayer.Character:WaitForChild(AldyTois2(-24263));
end;
local function AldyToiDk()
	local AldyToiq = game:GetService("\086\105\114\116\117\097\108\085\115\101\114");
	AldyToiH[AldyTois2(-24646)][AldyTois2(-24518)]:Connect(function()
		AldyToiq:Button2Down(Vector2[AldyTois2(-24169)](0, 0), AldyToik.CurrentCamera.CFrame);
		task[AldyTois2(-24376)](1);
		AldyToiq:Button2Up(Vector2[AldyTois2(-24169)](0, 0), AldyToik.CurrentCamera.CFrame);
		AldyToiq:CaptureController();
		AldyToiq:ClickButton2(Vector2[AldyTois2(-24169)]());
	end);
end;
AldyToiDk();
local function AldyToibk()
	AldyToiW[AldyTois2(-24316)][AldyTois2(-24407)]["\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048"].net[AldyTois2(-24606)]:InvokeServer();
end;
AldyToij:Paragraph({
	[AldyTois2(-24332)] = AldyTois2(-24243),
	[AldyTois2(-24415)] = "\073\102 \080\101\114\102\101\099\116 \067\097\115\116 \097\110\100 \065\109\097\122\105\110\103 \067\097\115\116 \097\114\101 \100\105\115\097\098\108\101\100\044 \099\097\115\116\105\110\103 \119\105\108\108 \098\101 \114\097\110\100\111\109\046 \069\110\097\098\108\101 \097\117\116\111 \114\101\115\112\097\119\110 \116\111 \102\105\120 \103\101\116\116\105\110\103 \115\116\117\099\107 \119\104\105\108\101 \102\105\115\104\105\110\103\046",
	[AldyTois2(-24180)] = AldyTois2(-24471),
	[AldyTois2(-24530)] = true,
});
local AldyToilk = AldyToij:Dropdown({
		[AldyTois2(-24332)] = AldyTois2(-24325),
		[AldyTois2(-24449)] = { "\082\097\110\100\111\109", AldyTois2(-24292), "\065\109\097\122\105\110\103" },
		[AldyTois2(-24636)] = false,
		Value = AldyTois2(-24521),
		AllowNone = false,
		Callback = function(AldyToiq)
			if AldyToiq == AldyTois2(-24292) then
				AldyToiY[AldyTois2(-24343)] = true;
				AldyToiY[AldyTois2(-24261)] = false;
			elseif AldyToiq == "\065\109\097\122\105\110\103" then
				AldyToiY[AldyTois2(-24261)] = true;
				AldyToiY.perfectCast = false;
			elseif AldyToiq == "\082\097\110\100\111\109" then
				AldyToiY.perfectCast = false;
				AldyToiY.amazingCast = false;
			end;
		end,
	});
AldyToiS:Register("\067\097\115\116\068\114\111\112\068\111\119\110", AldyToilk);
local AldyToiMk = AldyToij:Toggle({ [AldyTois2(-24332)] = "\240\159\142\163 \065\117\116\111 \070\105\115\104\105\110\103", Default = false, Callback = function(AldyToiq)
			AldyToiY.autoFishing = AldyToiq;
			AldyToiYk(AldyToiq);
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24419), AldyToiMk);
local AldyToisk = AldyToij:Slider({
		[AldyTois2(-24332)] = AldyTois2(-24588),
		[AldyTois2(-24402)] = { [AldyTois2(-24423)] = .1, Max = 2, Default = .1 },
		Step = .1,
		[AldyTois2(-24429)] = function(AldyToiq)
			AldyToiY[AldyTois2(-24533)] = AldyToiq;
			AldyToiS:Save();
		end,
	});
AldyToiS:Register("\102\105\115\104\105\110\103\068\101\108\097\121", AldyToisk);
local AldyToiEk = AldyToij:Dropdown({
		Title = "\070\105\115\104\105\110\103 \065\110\105\109\097\116\105\111\110",
		[AldyTois2(-24449)] = { AldyTois2(-24364), AldyTois2(-24587) },
		[AldyTois2(-24402)] = AldyTois2(-24587),
		Multi = false,
		[AldyTois2(-24478)] = false,
		Callback = function(AldyToiq)
			if AldyToiq == "\078\111\114\109\097\108" then
				AldyToiY[AldyTois2(-24387)] = false;
			elseif AldyToiq == AldyTois2(-24364) then
				AldyToiY[AldyTois2(-24387)] = true;
			end;
		end,
	});
AldyToiS:Register(AldyTois2(-24667), AldyToiEk);
local AldyToiq2 = AldyToij:Toggle({ Title = AldyTois2(-24400), Default = false, Callback = function(AldyToiq)
			AldyToiS:Save();
			AldyToiY.autoRespawn = AldyToiq;
		end });
AldyToiS:Register("\097\117\116\111\082\101\115\112\097\119\110", AldyToiq2);
local AldyToiH2 = 20;
AldyToij:Slider({
	Title = AldyTois2(-24224),
	[AldyTois2(-24402)] = { Min = 6, [AldyTois2(-24285)] = 20, [AldyTois2(-24607)] = 10 },
	Step = 1,
	Default = 10,
	Callback = function(AldyToiq)
		AldyToiH2 = tonumber(AldyToiq);
		AldyToiS:Save();
	end,
});
AldyToij:Button({ [AldyTois2(-24332)] = AldyTois2(-24303), Desc = "\073\109\109\101\100\105\097\116\101\108\121 \114\101\115\112\097\119\110 \121\111\117\114 \099\104\097\114\097\099\116\101\114\046", [AldyTois2(-24429)] = function()
		AldyToiTk();
	end });
AldyToiC:Section({ Title = "\065\117\116\111 \083\101\108\108 \070\101\097\116\117\114\101\115" });
AldyToiC:Button({ Title = "\083\101\108\108 \065\108\108 \078\111\119", Callback = function()
		pcall(function()
			(((((AldyToiW:WaitForChild(AldyTois2(-24316))):WaitForChild("\095\073\110\100\101\120")):WaitForChild(AldyTois2(-24240))):WaitForChild(AldyTois2(-24309))):WaitForChild(AldyTois2(-24606))):InvokeServer();
			AldyToiq:Notify({ Title = AldyTois2(-24523), [AldyTois2(-24280)] = AldyTois2(-24310), [AldyTois2(-24602)] = 3 });
		end);
	end });
local AldyToic2 = AldyToiC:Toggle({
		[AldyTois2(-24332)] = AldyTois2(-24304),
		[AldyTois2(-24502)] = AldyTois2(-24314),
		[AldyTois2(-24607)] = false,
		Callback = function(AldyToiq)
			AldyToiY[AldyTois2(-24520)] = AldyToiq;
			AldyToiS:Save();
		end,
	});
AldyToiS:Register(AldyTois2(-24373), AldyToic2);
local AldyToik2 = 10;
local AldyToiw2 = AldyToiC:Input({ Title = "\240\159\142\175 \065\117\116\111 \083\101\108\108 \084\104\114\101\115\104\111\108\100", Placeholder = AldyTois2(-24360), Callback = function(AldyToiH)
			local AldyToic = tonumber(AldyToiH);
			if AldyToic then
				AldyToik2 = AldyToic;
				AldyToiq:Notify({ Title = "\084\104\114\101\115\104\111\108\100 \085\112\100\097\116\101\100", [AldyTois2(-24502)] = AldyTois2(-24605) .. AldyToik2, [AldyTois2(-24602)] = 1 });
			else
				AldyToiq:Notify({ Title = "\073\110\118\097\108\105\100 \073\110\112\117\116", Description = AldyTois2(-24505), Duration = 1 });
			end;
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24654), AldyToiw2);
local AldyToiN2 = 4990;
local AldyToig2 = {
		["\070\105\115\104\101\114\109\097\110 \073\115\108\097\110\100"] = { CFrame[AldyTois2(-24169)](-65.1821136, 3.53157115, 2775.68311, .33803311, 3.37374004e-08, .941134214, 3.34767392e-09, 1, -3.7050004e-08, -0.941134214, 1.5674738e-08, .33803311) },
		[AldyTois2(-24396)] = { CFrame[AldyTois2(-24169)](-3118.39624, 2.42531538, 2135.26392, .92336154, -1.0069185e-07, -0.383931547, 8.0607947e-08, 1, -6.84016968e-08, .383931547, 3.22115596e-08, .92336154), CFrame[AldyTois2(-24169)](-2965.5708, 22.7500286, 2249.01709, .0730288103, 3.98725897e-09, .997329831, 2.27064021e-08, 1, -5.6605951e-09, -0.997329831, 2.30591581e-08, .0730288103), CFrame.new(-3102.16309, 5.97334528, 2218.88696, .758339584, 8.40698444e-09, -0.651859701, 2.32941257e-08, 1, 3.99960918e-08, .651859701, -4.55151223e-08, .758339584) },
		["\087\101\097\116\104\101\114 \077\097\099\104\105\110\101"] = { CFrame.new(-1459.3772, 14.7103214, 1831.5188, .777951121, 2.52131862e-08, -0.628324807, -5.24126378e-08, 1, -2.47663063e-08, .628324807, 5.21991339e-08, .777951121), CFrame.new(-1521.20862, 2.87499976, 1912.40564, -0.989418149, 1.00299182e-08, -0.14509216, 6.85348089e-09, 1, 2.23923866e-08, .14509216, 2.11610462e-08, -0.989418149), CFrame.new(-1574.57129, 13.1473379, 1920.83826, -0.816545427, -3.39974235e-08, .577281177, -6.96619793e-08, 1, -3.96422877e-08, -0.577281177, -7.25842781e-08, -0.816545427) },
		[AldyTois2(-24563)] = { CFrame.new(-3765.69751, -135.074417, -906.893677, .704144239, 3.52946827e-08, -0.710056961, -3.45032909e-08, 1, 1.5490853e-08, .710056961, 1.35915084e-08, .704144239), CFrame.new(-3780.09692, -135.074417, -962.226746, -0.366469413, -5.94525993e-08, -0.930430114, 1.91083362e-08, 1, -7.14241963e-08, .930430114, -4.39537544e-08, -0.366469413) },
		["\087\105\110\116\101\114 \070\101\115\116"] = { CFrame.new(1820.92529, 5.7885952, 3305.04761, -0.290378898, 1.26296209e-08, -0.956911743, -2.8187932e-08, 1, 2.17520597e-08, .956911743, 3.32897017e-08, -0.290378898), CFrame.new(1704.83362, 4.38193512, 3189.80811, .715091407, 8.31226021e-09, .699030936, -3.8851347e-08, 1, 2.78528525e-08, -0.699030936, -4.70756305e-08, .715091407) },
		[AldyTois2(-24643)] = { CFrame[AldyTois2(-24169)](3272.27344, -1301.35535, 1390.97058, -0.422851175, -5.61508493e-08, -0.906199157, 7.32285486e-08, 1, -9.6132986e-08, .906199157, -1.07009591e-07, -0.422851175) },
		["\084\114\111\112\105\099\097\108 \071\114\111\118\101"] = { CFrame.new(-2126.49707, 53.4868774, 3640.20581, -0.872817099, 4.77880704e-08, .488047391, 7.77828291e-09, 1, -8.40062881e-08, -0.488047391, -6.95259601e-08, -0.872817099) },
		[AldyTois2(-24631)] = {
			CFrame.new(-3600.62988, -279.0737, -1692.755, -0.938830554, -1.7142467e-08, .344379485, -1.96833128e-08, 1, -3.8818464e-09, -0.344379485, -1.04229247e-08, -0.938830554),
			CFrame[AldyTois2(-24169)](-3625.0708, -279.074219, -1594.57605, .918176472, -3.97606392e-09, -0.396171629, -1.12946204e-08, 1, -3.62128851e-08, .396171629, 3.77244298e-08, .918176472),
			CFrame.new(-3600.72632, -276.06427, -1640.79663, -0.696130812, -6.0491181e-09, .717914939, -1.09490363e-08, 1, -2.19084972e-09, -0.717914939, -9.38559541e-09, -0.696130812),
			CFrame[AldyTois2(-24169)](-3548.52222, -269.309845, -1659.26685, .0472991578, -4.08685423e-08, .998880744, -7.68598838e-08, 1, 4.45538149e-08, -0.998880744, -7.88812216e-08, .0472991578),
			CFrame[AldyTois2(-24169)](-3581.84155, -279.09021, -1696.15637, -0.999634147, -0.000535600528, -0.0270430837, -0.000448358158, .999994695, -0.00323198596, .0270446707, -0.00321867829, -0.99962908),
			CFrame.new(-3601.34302, -282.790955, -1629.37036, -0.526346684, .00143659476, .850268841, -0.000266355521, .999998271, -0.00185445137, -0.850269973, -0.00120255165, -0.526345372),
			CFrame.new(-3601.52588, -282.991669, -1629.59265, -0.0535041578, -7.48535811e-08, .998567641, 6.44989342e-08, 1, 7.84168677e-08, -0.998567641, 6.86021764e-08, -0.0535041578),
			CFrame[AldyTois2(-24169)](-3594.76074, -275.663788, -1642.65515, .992020428, 2.66124651e-08, -0.126077324, -2.72226544e-08, 1, -3.11684589e-09, .126077324, 6.52413412e-09, .992020428),
		},
		[AldyTois2(-24462)] = { CFrame.new(-3686.70557, 50.5551491, -802.862549, .671186864, -1.9727894e-08, .741288185, 8.82212987e-08, 1, -5.32654987e-08, -0.741288185, 1.01148508e-07, .671186864), CFrame.new(-3674.72852, 5.4255538, -860.631531, -0.995413721, 6.02128791e-09, .0956638828, 3.38107586e-09, 1, -2.77609349e-08, -0.0956638828, -2.73101683e-08, -0.995413721) },
		[AldyTois2(-24512)] = {
			CFrame.new(-648.832397, 45.2862358, 146.425705, -0.107698888, -2.22477787e-08, .99418354, 2.75738845e-08, 1, 2.53649883e-08, -0.99418354, 3.01452836e-08, -0.107698888),
			CFrame[AldyTois2(-24169)](-673.803223, 55.5000572, 183.610779, .122808129, 6.084327e-08, -0.992430449, -9.00719144e-08, 1, 5.01614039e-08, .992430449, 8.32298852e-08, .122808129),
			CFrame[AldyTois2(-24169)](-675.741272, 55.5000572, 164.999741, .700404584, -6.1561245e-08, -0.713746011, 7.66120891e-08, 1, -1.10708571e-08, .713746011, -4.69274966e-08, .700404584),
			CFrame[AldyTois2(-24169)](-648.186584, 45.7505226, 172.17453, -0.995664299, 3.11417523e-08, .0930196419, 3.00717424e-08, 1, -1.29047226e-08, -0.0930196419, -1.0051509e-08, -0.995664299),
		},
		[AldyTois2(-24187)] = { CFrame.new(-658.677429, 20.0969162, 547.795715, .08832293, -2.84166846e-09, -0.996091902, 1.26686484e-08, 1, -1.72949544e-09, .996091902, -1.24663835e-08, .08832293), CFrame.new(-653.275757, 17.2500591, 490.213684, .223178998, 0, -0.97477746, 0, 1, 0, .97477746, 0, .223178998) },
		[AldyTois2(-24241)] = {
			CFrame.new(1066.1864, 57.2025681, 5045.5542, -0.682534158, 1.00865822e-08, .730853677, -5.8900711e-09, 1, -1.93017531e-08, -0.730853677, -1.74788859e-08, -0.682534158),
			CFrame.new(1057.28992, 33.0884132, 5133.79883, .833871782, 5.44149223e-08, .551958203, -6.58184218e-09, 1, -8.86416984e-08, -0.551958203, 7.02829084e-08, .833871782),
			CFrame[AldyTois2(-24169)](988.954712, 42.8254471, 5088.71289, -0.849417388, -9.89310394e-08, .527721584, -5.96115086e-08, 1, 9.15179328e-08, -0.527721584, 4.62786431e-08, -0.849417388),
			CFrame[AldyTois2(-24169)](1006.70685, 17.2302666, 5092.14844, -0.989664078, 5.6538525e-09, -0.143405005, 9.14879283e-09, 1, -2.3711717e-08, .143405005, -2.47786183e-08, -0.989664078),
			CFrame.new(1025.02356, 2.77259707, 5011.47021, -0.974474192, -6.87871804e-08, .224499553, -4.47472104e-08, 1, 1.12170284e-07, -0.224499553, 9.92613209e-08, -0.974474192),
			CFrame.new(1071.14551, 3.528404, 5038.00293, -0.532300115, 3.38677708e-08, .84655571, 6.69992914e-08, 1, 2.12149165e-09, -0.84655571, 5.7847906e-08, -0.532300115),
			CFrame[AldyTois2(-24169)](1022.55457, 16.6277809, 5066.28223, .721996129, 0, -0.691897094, 0, 1, 0, .691897094, 0, .721996129),
			CFrame.new(1023.29114, 19.1177425, 5070.02588, .507022858, 2.01505461e-08, -0.861932635, 5.94909153e-08, 1, 5.83732387e-08, .861932635, -8.08737255e-08, .507022858),
			CFrame.new(981.318909, 41.6503983, 5078.02344, -0.0676535219, -6.19234299e-08, .997708857, -2.32029294e-08, 1, 6.04922619e-08, -0.997708857, -1.90572536e-08, -0.0676535219),
		},
	};
local function AldyToiO2()
	if not AldyToiGk or #AldyToiGk == 0 then
		AldyToiq:Notify({ Title = AldyTois2(-24644), [AldyTois2(-24502)] = "\080\108\101\097\115\101 \115\101\108\101\099\116 \105\115\108\097\110\100 \116\111 \115\116\097\114\116 \097\117\116\111 \102\097\114\109", [AldyTois2(-24602)] = 1 });
		return;
	end;
	local AldyToiH = AldyToiGk[math.random(1, #AldyToiGk)];
	local AldyToic = AldyToig2[AldyToiH];
	if AldyToic and #AldyToic > 0 then
		local AldyToiq = AldyToic[math.random(1, #AldyToic)];
		local AldyToiH = game.Players.LocalPlayer[AldyTois2(-24465)]:WaitForChild(AldyTois2(-24263));
		if AldyToiH.Anchored then
			AldyToiH.Anchored = false;
			task[AldyTois2(-24376)](.1);
		end;
		AldyToiH[AldyTois2(-24639)] = AldyToiq;
		if AldyToiRk[AldyTois2(-24468)] then
			AldyToiRk.position = AldyToiH.CFrame;
		end;
	end;
end;
AldyToiJ:Paragraph({
	Title = AldyTois2(-24228),
	Desc = AldyTois2(-24274),
	[AldyTois2(-24180)] = "\071\114\101\101\110",
	Locked = true,
});
local AldyToiW2 = {};
for AldyToiq, AldyToiH in pairs(AldyToig2) do
	table.insert(AldyToiW2, AldyToiq);
end;
local AldyToiL2 = AldyToiJ:Dropdown({
		Title = "\083\101\108\101\099\116 \073\115\108\097\110\100\040\115\041",
		Values = AldyToiW2,
		Multi = true,
		[AldyTois2(-24478)] = false,
		Callback = function(AldyToiq)
			AldyToiGk = AldyToiq;
		end,
	});
AldyToiS:Register(AldyTois2(-24555), AldyToiL2);
local AldyToiQ2 = 10;
local AldyToiV2 = AldyToiJ:Input({ Title = AldyTois2(-24416), Placeholder = AldyTois2(-24585), [AldyTois2(-24429)] = function(AldyToiH)
			local AldyToic = tonumber(AldyToiH);
			if AldyToic then
				AldyToiQ2 = AldyToic;
				AldyToiq:Notify({ Title = "\065\117\116\111 \070\097\114\109 \084\104\114\101\115\104\111\108\100 \085\112\100\097\116\101\100", Description = "\084\104\101 \112\108\097\121\101\114 \119\105\108\108 \116\101\108\101\112\111\114\116 \116\111 \116\104\101 \105\115\108\097\110\100 \097\102\116\101\114 \114\101\097\099\104\105\110\103 " .. (AldyToic .. " \102\105\115\104"), [AldyTois2(-24602)] = 1 });
			else
				AldyToiq:Notify({ [AldyTois2(-24332)] = AldyTois2(-24659), Description = "\080\108\101\097\115\101 \101\110\116\101\114 \097 \110\117\109\098\101\114\044 \110\111\116 \116\101\120\116\046", [AldyTois2(-24602)] = 1 });
			end;
		end });
AldyToiS:Register(AldyTois2(-24653), AldyToiV2);
local AldyToim2 = AldyToiJ:Toggle({ Title = AldyTois2(-24538), [AldyTois2(-24607)] = false, [AldyTois2(-24429)] = function(AldyToiq)
			if AldyToiq then
				AldyToiO2();
				AldyToiY[AldyTois2(-24664)] = AldyToiq;
				AldyToiMk:Set(AldyToiq);
				AldyToiYk(AldyToiq);
			end;
		end });
AldyToiS:Register(AldyTois2(-24537), AldyToim2);
(getgenv())[AldyTois2(-24391)] = AldyToib:Toggle({ [AldyTois2(-24332)] = "\070\097\118\111\114\105\116\101 \065\108\108 \076\101\103\101\110\100\097\114\121", [AldyTois2(-24607)] = false, Callback = function(AldyToiq)
			AldyToix.Legendary = AldyToiq;
			if AldyToiq then
				AldyToiak();
			end;
		end });
AldyToiS:Register(AldyTois2(-24391), (getgenv()).FavoriteLegend);
(getgenv())[AldyTois2(-24461)] = AldyToib:Toggle({ Title = "\070\097\118\111\114\105\116\101 \065\108\108 \077\121\116\104\105\099\097\108", [AldyTois2(-24607)] = true, Callback = function(AldyToiq)
			AldyToix[AldyTois2(-24229)] = AldyToiq;
			if AldyToiq then
				AldyToiuk();
			end;
		end });
AldyToiS:Register("\070\097\118\111\114\105\116\101\077\121\116\104\105\099", (getgenv())[AldyTois2(-24461)]);
(getgenv())[AldyTois2(-24190)] = AldyToib:Toggle({ [AldyTois2(-24332)] = "\070\097\118\111\114\105\116\101 \065\108\108 \083\101\099\114\101\116", [AldyTois2(-24607)] = false, Callback = function(AldyToiq)
			AldyToix.Secret = AldyToiq;
			if AldyToiq then
				AldyToiok();
			end;
		end });
AldyToiS:Register(AldyTois2(-24190), (getgenv()).FavoriteSecret);
local AldyToiB2 = AldyToiW:WaitForChild(AldyTois2(-24472));
local AldyToiP2 = {};
for AldyToiq, AldyToiH in ipairs(AldyToiB2:GetChildren()) do
	table[AldyTois2(-24620)](AldyToiP2, AldyToiH.Name);
end;
local AldyToip2 = {};
local AldyToii2 = AldyToib:Dropdown({
		Title = AldyTois2(-24615),
		[AldyTois2(-24449)] = AldyToiP2,
		[AldyTois2(-24636)] = true,
		[AldyTois2(-24478)] = false,
		Value = {},
		Callback = function(AldyToiq)
			AldyToip2 = AldyToiq;
		end,
	});
AldyToiS:Register("\102\097\118\111\114\105\116\101\086\097\114\105\097\110\116", AldyToii2);
AldyToib:Button({ Title = "\070\097\118\111\114\105\116\101 \065\108\108", [AldyTois2(-24429)] = function()
		AldyToitk();
	end });
AldyToib:Button({ [AldyTois2(-24332)] = AldyTois2(-24632), Callback = function()
		AldyToifk();
	end });
local AldyToiI2 = AldyToiT:Toggle({ [AldyTois2(-24332)] = "\070\108\111\097\116\105\110\103", [AldyTois2(-24607)] = false, Callback = function(AldyToiq)
			AldyToiY.floatingPlatform = AldyToiq;
			AldyToirk(AldyToiq);
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24609), AldyToiI2);
do
	local AldyToiq = {
			[AldyTois2(-24226)] = AldyTois2(-24307),
			[AldyTois2(-24541)] = "\089\101\115",
			ClicksPerSecond = 1,
			[AldyTois2(-24641)] = 4,
			EdgePaddingFrac = .05,
			[AldyTois2(-24647)] = true,
			[AldyTois2(-24345)] = false,
			UILoadDelay = .3,
			[AldyTois2(-24320)] = .5,
			RetryDelay = .2,
			StopOnTextMatches = { "\116\114\097\100\101 \099\111\109\112\108\101\116\101\100\033", AldyTois2(-24539) },
			[AldyTois2(-24598)] = { "\116\114\097\100\101 \099\097\110\099\101\108\108\101\100", "\116\114\097\100\101 \102\097\105\108\101\100" },
			RayfieldEnabled = true,
		};
	local AldyToiH = game:GetService(AldyTois2(-24446));
	local AldyToic = game:GetService(AldyTois2(-24223));
	local AldyToik = game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101");
	local AldyToiN = AldyToiw:WaitForChild("\080\108\097\121\101\114\071\117\105");
	local AldyToig, AldyToiO = false, false;
	local AldyToiW = false;
	local AldyToiL = nil;
	local AldyToiQ = nil;
	local AldyToiV = nil;
	local AldyToim = nil;
	local AldyToiB = nil;
	local AldyToiP = nil;
	local function AldyToip(AldyToiq)
		return AldyToiq and (AldyToiq.Parent and (AldyToiq.Visible and (AldyToiq[AldyTois2(-24525)] and (AldyToiq.AbsoluteSize[AldyTois2(-24526)] > 0 and AldyToiq:IsDescendantOf(AldyToiN)))));
	end;
	local function AldyToii()
		local AldyToiH = AldyToiN:FindFirstChild(AldyToiq[AldyTois2(-24226)]);
		return AldyToiH and (AldyToiH:IsA("\083\099\114\101\101\110\071\117\105") and AldyToiH) or nil;
	end;
	local function AldyToiI()
		local AldyToiq = AldyToii();
		if not AldyToiq then
			return nil;
		end;
		local AldyToiH = AldyToiq:FindFirstChildWhichIsA(AldyTois2(-24272), true);
		return AldyToiH and AldyToiH.Text or nil;
	end;
	local function AldyToin()
		local AldyToiq = AldyToiI();
		if not AldyToiq then
			return false;
		end;
		AldyToiq = AldyToiq:lower();
		return AldyToiq:find(AldyTois2(-24390)) and AldyToiq:find(AldyTois2(-24218)) or false;
	end;
	local function AldyToiF(AldyToiH)
		if not AldyToiH then
			return nil;
		end;
		for AldyToiH, AldyToic in ipairs(AldyToiH:GetDescendants()) do
			if AldyToin() and (AldyToic:IsA("\073\109\097\103\101\066\117\116\116\111\110") and AldyToic[AldyTois2(-24642)] == AldyToiq.YesButtonName) then
				if AldyToip(AldyToic) then
					return AldyToic;
				end;
			end;
		end;
		return nil;
	end;
	local function AldyToiX(AldyToiq)
		local AldyToiH, AldyToik = AldyToiq.AbsolutePosition, AldyToiq.AbsoluteSize;
		local AldyToiw = AldyToic:GetGuiInset();
		return {
			X = AldyToiH[AldyTois2(-24217)],
			[AldyTois2(-24278)] = AldyToiH[AldyTois2(-24278)] + AldyToiw[AldyTois2(-24278)],
			[AldyTois2(-24495)] = AldyToik.X,
			H = AldyToik.Y,
		};
	end;
	local function AldyToiy(AldyToiH)
		local AldyToic = math[AldyTois2(-24247)](AldyToiq.EdgePaddingFrac, 0, .49);
		local AldyToik, AldyToiw = AldyToiH.X + AldyToiH.W * AldyToic, AldyToiH[AldyTois2(-24217)] + AldyToiH.W * (1 - AldyToic);
		local AldyToiN, AldyToig = AldyToiH.Y + AldyToiH[AldyTois2(-24601)] * AldyToic, AldyToiH[AldyTois2(-24278)] + AldyToiH[AldyTois2(-24601)] * (1 - AldyToic);
		local AldyToiO = (AldyToik + AldyToiw) / 2;
		local AldyToiW = (AldyToiN + AldyToig) / 2;
		return AldyToiO, AldyToiW;
	end;
	(AldyToiw[AldyTois2(-24273)]:WaitForChild(AldyTois2(-24307)))[AldyTois2(-24454)]:Connect(function(AldyToiq)
		if AldyToiq[AldyTois2(-24642)] == AldyTois2(-24208) then
			local AldyToiH = AldyToiq:WaitForChild("\079\112\116\105\111\110\115");
			local AldyToic = AldyToiH:WaitForChild(AldyTois2(-24448));
			AldyToic[AldyTois2(-24525)] = true;
			AldyToic[AldyTois2(-24301)] = true;
		end;
	end);
	local function AldyToia(AldyToic, AldyToik)
		if AldyToiq.UseVIM and AldyToiH then
			pcall(function()
				if AldyToiq[AldyTois2(-24345)] then
					AldyToiH:SendMouseMoveEvent(AldyToic, AldyToik, game);
					task[AldyTois2(-24376)](AldyToiq.ClickDelay);
				end;
				AldyToiH:SendMouseButtonEvent(AldyToic, AldyToik, 0, true, game, 0);
				task[AldyTois2(-24376)](AldyToiq[AldyTois2(-24320)]);
				AldyToiH:SendMouseButtonEvent(AldyToic, AldyToik, 0, false, game, 0);
			end);
		elseif AldyToiV and AldyToip(AldyToiV) then
			pcall(function()
				AldyToiV[AldyTois2(-24545)]:Fire();
			end);
		end;
	end;
	local function AldyToiu()
		AldyToiW = true;
		for AldyToiq = 1, 50, 1 do
			if not AldyToiO then
				break;
			end;
			task[AldyTois2(-24376)](.01);
		end;
		AldyToiO = false;
	end;
	local function AldyToio(AldyToiq, AldyToiH)
		local AldyToic = tick() + (AldyToiH or 2);
		while tick() < AldyToic do
			local AldyToiH = AldyToiF(AldyToiq);
			if AldyToiH and AldyToip(AldyToiH) then
				return AldyToiH;
			end;
			task.wait(.05);
		end;
		return nil;
	end;
	local function AldyToiU()
		if AldyToiO then
			return;
		end;
		AldyToiV = AldyToio(AldyToiQ, 2);
		if not AldyToiV then
			return;
		end;
		local AldyToiH = AldyToiX(AldyToiV);
		AldyToiO = true;
		AldyToiW = false;
		AldyToiL = task[AldyTois2(-24489)](function()
				local AldyToic = tick();
				local AldyToik = 0;
				while AldyToiO and (AldyToig and not AldyToiW) do
					if not AldyToip(AldyToiV) then
						break;
					end;
					if AldyToik % 5 == 0 then
						local AldyToiq = AldyToiX(AldyToiV);
						if AldyToiq then
							AldyToiH = AldyToiq;
						end;
					end;
					local AldyToiw, AldyToiN = AldyToiy(AldyToiH);
					AldyToia(AldyToiw, AldyToiN);
					AldyToik = AldyToik + 1;
					local AldyToig = 1 / math.clamp(AldyToiq.ClicksPerSecond, 6, 40);
					task[AldyTois2(-24376)](AldyToig);
					if tick() - AldyToic > AldyToiq.MaxSpamSeconds then
						break;
					end;
				end;
				AldyToiO = false;
			end);
	end;
	local function AldyToiG()
		if AldyToiP then
			AldyToiP:Disconnect();
			AldyToiP = nil;
		end;
		AldyToiB = AldyToiB or AldyToik:FindFirstChild(AldyTois2(-24288));
		if AldyToiB and AldyToiB:IsA("\082\101\109\111\116\101\069\118\101\110\116") then
			AldyToiP = AldyToiB.OnClientEvent:Connect(function(AldyToiH)
					local AldyToic = type(AldyToiH) == AldyTois2(-24558) and AldyToiH.Text or AldyToiH;
					if not AldyToic then
						return;
					end;
					local AldyToik = (tostring(AldyToic)):lower();
					for AldyToiq, AldyToiH in ipairs(AldyToiq.StopOnTextMatches) do
						if string[AldyTois2(-24409)](AldyToik, AldyToiH:lower(), 1, true) then
							AldyToiu();
							return;
						end;
					end;
					for AldyToiq, AldyToiH in ipairs(AldyToiq[AldyTois2(-24598)]) do
						if string.find(AldyToik, AldyToiH:lower(), 1, true) then
							AldyToiu();
							return;
						end;
					end;
				end);
		end;
	end;
	local function AldyToiv()
		if not AldyToig or not AldyToiQ then
			return;
		end;
		if AldyToiQ[AldyTois2(-24212)] then
			task[AldyTois2(-24321)](AldyToiq.UILoadDelay, AldyToiU);
		else
			AldyToiu();
		end;
	end;
	local function AldyToiZ()
		if AldyToim then
			AldyToim:Disconnect();
		end;
		AldyToiQ = AldyToii();
		if not AldyToiQ then
			return;
		end;
		AldyToim = (AldyToiQ:GetPropertyChangedSignal("\069\110\097\098\108\101\100")):Connect(AldyToiv);
	end;
	local function AldyToiA(AldyToiH)
		AldyToiH = AldyToiH or {};
		for AldyToiH, AldyToic in pairs(AldyToiH) do
			if AldyToiq[AldyToiH] ~= nil then
				AldyToiq[AldyToiH] = AldyToic;
			end;
		end;
		AldyToiG();
	end;
	local function AldyToih()
		if AldyToig then
			return;
		end;
		AldyToig = true;
		AldyToiZ();
		task[AldyTois2(-24321)](AldyToiq[AldyTois2(-24509)], function()
			if AldyToig and (AldyToiQ and AldyToiQ[AldyTois2(-24212)]) then
				AldyToiU();
			end;
		end);
	end;
	local function AldyToit()
		if not AldyToig then
			return;
		end;
		AldyToig = false;
		AldyToiu();
	end;
	local function AldyToif(AldyToiH)
		AldyToiq[AldyTois2(-24541)] = AldyToiH;
	end;
	local function AldyToie(AldyToiH)
		AldyToiq[AldyTois2(-24365)] = AldyToiH;
		AldyToiq[AldyTois2(-24647)] = AldyToiH;
		if not AldyToiH then
			AldyToit();
		end;
	end;
	local AldyToiK = AldyToiT:Toggle({ Title = "\065\117\116\111\065\099\099\101\112\116\084\114\097\100\101", Default = false, Callback = function(AldyToiq)
				if AldyToiq then
					AldyToie(true);
					AldyToih();
				else
					AldyToie(false);
				end;
			end });
	AldyToiS:Register(AldyTois2(-24450), AldyToiK);
	AldyToiA({ [AldyTois2(-24365)] = false });
end;
local function AldyToin2(AldyToiq)
	if not AldyToiq or type(AldyToiq) ~= AldyTois2(-24442) then
		return AldyTois2(-24514);
	end;
	if AldyToiq >= 1000000 then
		return string[AldyTois2(-24508)]("\037\046\049\102\077 \067\111\105\110\115", AldyToiq / 1000000);
	elseif AldyToiq >= 1000 then
		return string[AldyTois2(-24508)]("\037\046\049\102\107 \067\111\105\110\115", AldyToiq / 1000);
	else
		return tostring(AldyToiq) .. AldyTois2(-24356);
	end;
end;
local AldyToiF2 = {};
for AldyToiq, AldyToiH in ipairs(AldyToiy:GetChildren()) do
	if AldyToiH:IsA(AldyTois2(-24271)) then
		local AldyToiq, AldyToic = pcall(require, AldyToiH);
		if AldyToiq and typeof(AldyToic) == AldyTois2(-24558) then
			local AldyToiq = AldyToic.Data;
			if AldyToiq and AldyToiq[AldyTois2(-24395)] == "\070\105\115\104\105\110\103 \082\111\100\115" then
				local AldyToik = AldyToiq[AldyTois2(-24192)] or "\063";
				local AldyToiw = AldyToiq[AldyTois2(-24642)] or AldyToiH[AldyTois2(-24642)];
				local AldyToiN = AldyToiq[AldyTois2(-24502)] or "-";
				local AldyToig = AldyTois2(-24514);
				if AldyToic[AldyTois2(-24302)] then
					AldyToig = AldyToin2(AldyToic.Price);
				else
					local AldyToiq = {
							["\071\111\108\100 \082\111\100"] = AldyTois2(-24220),
							[AldyTois2(-24311)] = AldyTois2(-24650),
							[AldyTois2(-24331)] = "\053\048\107 \067\111\105\110\115",
							[AldyTois2(-24231)] = "\052\051\055\107 \067\111\105\110\115",
						};
					AldyToig = AldyToiq[AldyToiw] or "\063\063\063 \085\110\107\110\111\119\110";
				end;
				table[AldyTois2(-24620)](AldyToiF2, {
					ID = AldyToik,
					[AldyTois2(-24642)] = AldyToiw,
					Dex = AldyToiN,
					[AldyTois2(-24359)] = AldyToig,
				});
			end;
		end;
	end;
end;
AldyToiE:Paragraph({ Title = AldyTois2(-24369), [AldyTois2(-24415)] = "\083\111\109\101 \082\111\100\115 \099\097\110\'\116 \098\101 \112\117\114\099\104\097\115\101\100 \098\101\099\097\117\115\101 \116\104\101\121 \097\114\101 \086\073\080 \111\110\108\121 \111\114 \100\111\101\115\110\'\116 \104\097\118\101 \097 \112\114\105\099\101 \109\097\112\046", [AldyTois2(-24180)] = "\082\101\100" });
for AldyToiH, AldyToic in ipairs(AldyToiF2) do
	AldyToiE:Button({ [AldyTois2(-24332)] = string[AldyTois2(-24508)](AldyTois2(-24452), AldyToic[AldyTois2(-24642)], AldyToic[AldyTois2(-24359)]), [AldyTois2(-24429)] = function()
			local AldyToiH, AldyToik = pcall(function()
					return AldyToiW.Packages[AldyTois2(-24407)][AldyTois2(-24240)][AldyTois2(-24309)][AldyTois2(-24277)]:InvokeServer(AldyToic[AldyTois2(-24279)]);
				end);
			AldyToiq:Notify({ [AldyTois2(-24332)] = AldyTois2(-24424), [AldyTois2(-24502)] = AldyToiH and "\066\117\121\105\110\103 " .. AldyToic[AldyTois2(-24642)] or "\070\097\105\108\101\100 \116\111 \098\117\121 " .. AldyToic.Name, [AldyTois2(-24602)] = 2 });
			if not AldyToiH then
				warn(AldyTois2(-24378), AldyToik);
			end;
		end });
end;
local AldyToiX2 = AldyToiW:FindFirstChild("\066\097\105\116\115");
if not AldyToiX2 then
	warn(AldyTois2(-24504));
	return;
end;
AldyToiE:Paragraph({ Title = "\066\097\105\116\047 \066\111\098\098\101\114", Desc = AldyTois2(-24548), [AldyTois2(-24180)] = "\082\101\100" });
for AldyToiH, AldyToic in ipairs(AldyToiX2:GetChildren()) do
	if AldyToic:IsA(AldyTois2(-24271)) then
		local AldyToiH, AldyToik = pcall(require, AldyToic);
		if AldyToiH and (AldyToik and AldyToik.Data) then
			local AldyToiH = AldyToik[AldyTois2(-24203)][AldyTois2(-24192)] or 0;
			local AldyToic = AldyToik[AldyTois2(-24203)].Name or AldyTois2(-24663);
			local AldyToiw = AldyToik.Data.Description or "-";
			local AldyToiN = AldyToik.Price and AldyToik.Price .. AldyTois2(-24356) or AldyTois2(-24575);
			AldyToiE:Button({ [AldyTois2(-24332)] = AldyToic .. (" \040" .. (AldyToiN .. AldyTois2(-24352))), Callback = function()
					pcall(function()
						AldyToiW[AldyTois2(-24316)]._Index[AldyTois2(-24240)][AldyTois2(-24309)][AldyTois2(-24608)]:InvokeServer(AldyToiH);
						AldyToiq:Notify({ [AldyTois2(-24332)] = "\066\097\105\116 \080\117\114\099\104\097\115\101", Description = "\066\117\121\105\110\103 " .. AldyToic, [AldyTois2(-24602)] = 2 });
					end);
				end });
		end;
	end;
end;
local AldyToiy2 = {};
local function AldyToia2()
	AldyToiy2[AldyTois2(-24524)] = { WaterWaveSize = workspace[AldyTois2(-24524)][AldyTois2(-24666)], WaterWaveSpeed = workspace.Terrain[AldyTois2(-24238)], [AldyTois2(-24484)] = workspace[AldyTois2(-24524)][AldyTois2(-24484)] };
	AldyToiy2[AldyTois2(-24610)] = {};
	AldyToiy2[AldyTois2(-24656)] = {};
	AldyToiy2.Meshes = {};
	for AldyToiq, AldyToiH in pairs(game:GetDescendants()) do
		if AldyToiH:IsA("\066\097\115\101\080\097\114\116") then
			AldyToiy2[AldyTois2(-24610)][AldyToiH] = {
					Color = AldyToiH[AldyTois2(-24180)],
					Material = AldyToiH.Material,
					[AldyTois2(-24665)] = AldyToiH.Reflectance,
					[AldyTois2(-24487)] = AldyToiH.CastShadow,
					Transparency = AldyToiH.Transparency,
				};
		elseif AldyToiH:IsA(AldyTois2(-24553)) or AldyToiH:IsA(AldyTois2(-24206)) then
			AldyToiy2.Decals[AldyToiH] = { [AldyTois2(-24447)] = AldyToiH[AldyTois2(-24447)], Texture = AldyToiH[AldyTois2(-24206)] };
		elseif AldyToiH:IsA(AldyTois2(-24354)) then
			AldyToiy2.Meshes[AldyToiH] = { [AldyTois2(-24517)] = AldyToiH.TextureId };
		end;
	end;
end;
local function AldyToiu2()
	AldyToia2();
	local AldyToiq = workspace.Terrain;
	local AldyToiH = (game:GetService(AldyTois2(-24492))).LocalPlayer;
	if sethiddenproperty then
		sethiddenproperty(AldyToiq, AldyTois2(-24666), 0);
		sethiddenproperty(AldyToiq, "\087\097\116\101\114\087\097\118\101\083\112\101\101\100", 0);
		sethiddenproperty(AldyToiq, "\087\097\116\101\114\082\101\102\108\101\099\116\097\110\099\101", 0);
	else
		AldyToiq.WaterWaveSize = 0;
		AldyToiq.WaterWaveSpeed = 0;
		AldyToiq.WaterReflectance = 0;
	end;
	for AldyToiq, AldyToic in pairs(game:GetDescendants()) do
		if AldyToic:IsA("\066\097\115\101\080\097\114\116") then
			if not (AldyToiH and AldyToic:IsDescendantOf(AldyToiH[AldyTois2(-24465)])) then
				AldyToic.Material = Enum[AldyTois2(-24186)].SmoothPlastic;
				AldyToic[AldyTois2(-24180)] = Color3.fromRGB(120, 120, 120);
				AldyToic.Reflectance = 0;
				AldyToic[AldyTois2(-24487)] = false;
			end;
		elseif AldyToic:IsA(AldyTois2(-24553)) or AldyToic:IsA("\084\101\120\116\117\114\101") then
			if not (AldyToic.Name == AldyTois2(-24255) and AldyToic.Parent:IsA("\072\101\097\100")) then
				AldyToic[AldyTois2(-24447)] = 1;
				AldyToic.Texture = AldyTois2(-24444);
			end;
		elseif AldyToic:IsA(AldyTois2(-24181)) or AldyToic:IsA(AldyTois2(-24515)) or AldyToic:IsA("\066\101\097\109") then
			AldyToic[AldyTois2(-24212)] = false;
		elseif AldyToic:IsA("\083\117\114\102\097\099\101\065\112\112\101\097\114\097\110\099\101") then
			AldyToic:Destroy();
		elseif AldyToic:IsA("\083\112\101\099\105\097\108\077\101\115\104") then
			AldyToic.TextureId = "";
		end;
	end;
	(settings()).Rendering[AldyTois2(-24195)] = Enum[AldyTois2(-24195)][AldyTois2(-24368)];
	(settings())[AldyTois2(-24383)].QualityLevel = Enum.QualityLevel[AldyTois2(-24368)];
end;
local function AldyToio2()
	local AldyToiq = workspace.Terrain;
	if AldyToiy2[AldyTois2(-24524)] then
		AldyToiq[AldyTois2(-24666)] = AldyToiy2.Terrain.WaterWaveSize;
		AldyToiq[AldyTois2(-24238)] = AldyToiy2.Terrain.WaterWaveSpeed;
		AldyToiq[AldyTois2(-24484)] = AldyToiy2.Terrain[AldyTois2(-24484)];
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiy2[AldyTois2(-24610)]) do
		if AldyToiq and AldyToiq.Parent then
			for AldyToiH, AldyToic in pairs(AldyToiH) do
				AldyToiq[AldyToiH] = AldyToic;
			end;
		end;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiy2[AldyTois2(-24656)]) do
		if AldyToiq and AldyToiq[AldyTois2(-24335)] then
			for AldyToiH, AldyToic in pairs(AldyToiH) do
				AldyToiq[AldyToiH] = AldyToic;
			end;
		end;
	end;
	for AldyToiq, AldyToiH in pairs(AldyToiy2.Meshes) do
		if AldyToiq and AldyToiq.Parent then
			for AldyToiH, AldyToic in pairs(AldyToiH) do
				AldyToiq[AldyToiH] = AldyToic;
			end;
		end;
	end;
end;
local function AldyToiU2()
	local AldyToiq = game:GetService(AldyTois2(-24499));
	AldyToiq[AldyTois2(-24182)] = 0;
	AldyToiq[AldyTois2(-24604)] = .5;
	AldyToiq[AldyTois2(-24459)] = Color3.fromRGB(10, 10, 10);
	AldyToiq.Ambient = Color3.fromRGB(5, 5, 5);
	AldyToiq.FogStart = 0;
	AldyToiq[AldyTois2(-24275)] = 100000;
	AldyToiq:ClearAllChildren();
	local AldyToiH = Instance[AldyTois2(-24169)]("\083\107\121");
	AldyToiH[AldyTois2(-24590)] = AldyTois2(-24444);
	AldyToiH[AldyTois2(-24582)] = AldyTois2(-24444);
	AldyToiH[AldyTois2(-24613)] = "";
	AldyToiH.SkyboxLf = AldyTois2(-24444);
	AldyToiH.SkyboxRt = AldyTois2(-24444);
	AldyToiH[AldyTois2(-24572)] = "";
	AldyToiH.SunAngularSize = 0;
	AldyToiH.MoonAngularSize = 0;
	AldyToiH[AldyTois2(-24188)] = 0;
	AldyToiH.Parent = AldyToiq;
end;
local AldyToiG2 = false;
local AldyToiv2 = AldyToiT:Toggle({ Title = "\068\097\114\107 \047 \078\105\103\104\116 \077\111\100\101", Default = false, Callback = function(AldyToiq)
			AldyToiG2 = AldyToiq;
		end });
AldyToiS:Register(AldyTois2(-24179), AldyToiv2);
AldyToic.RenderStepped:Connect(function()
	if AldyToiG2 then
		AldyToiU2();
	end;
end);
local AldyToiZ2 = AldyToiT:Toggle({
		Title = AldyTois2(-24388),
		[AldyTois2(-24502)] = AldyTois2(-24496),
		Default = true,
		Callback = function(AldyToiq)
			if AldyToiq then
				AldyToiu2();
			else
				AldyToio2();
			end;
			AldyToiS:Save();
		end,
	});
AldyToiS:Register(AldyTois2(-24260), AldyToiZ2);
local AldyToiA2 = AldyToiT:Toggle({
		[AldyTois2(-24332)] = AldyTois2(-24552),
		Description = "\068\105\115\097\098\108\101 \114\101\110\100\101\114 \102\111\114 \098\101\116\116\101\114 \070\080\083",
		Default = false,
		[AldyTois2(-24429)] = function(AldyToiq)
			if AldyToiq then
				pcall(function()
					AldyToic:Set3dRenderingEnabled(false);
				end);
			else
				pcall(function()
					AldyToic:Set3dRenderingEnabled(true);
				end);
			end;
			AldyToiS:Save();
		end,
	});
AldyToiS:Register("\114\101\110\100\101\114\051\100", AldyToiA2);
local AldyToih2 = {
		Disabled = false,
		[AldyTois2(-24616)] = require((game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101")).Controllers[AldyTois2(-24616)]),
		[AldyTois2(-24432)] = nil,
		OriginalStop = nil,
	};
function AldyToih2.SaveOriginal()
	if not AldyToih2[AldyTois2(-24432)] then
		AldyToih2[AldyTois2(-24432)] = AldyToih2[AldyTois2(-24616)][AldyTois2(-24410)];
	end;
	if not AldyToih2[AldyTois2(-24362)] then
		AldyToih2.OriginalStop = AldyToih2.CutsceneController.Stop;
	end;
end;
function AldyToih2.Disable()
	if AldyToih2[AldyTois2(-24463)] then
		return;
	end;
	AldyToih2[AldyTois2(-24463)] = true;
	AldyToih2.SaveOriginal();
	AldyToih2.CutsceneController[AldyTois2(-24410)] = function(AldyToiq, ...)
			local AldyToiH = require(AldyToiW[AldyTois2(-24257)][AldyTois2(-24385)]);
			local AldyToic = game:GetService(AldyTois2(-24401));
			local AldyToik = require(AldyToiW[AldyTois2(-24270)].QuestController);
			AldyToiH:SetHUDVisibility(true);
			AldyToic.Enabled = true;
			if AldyToik:IsEnabled() == false then
				AldyToik:SetEnabled(true);
			end;
		end;
	AldyToih2.CutsceneController[AldyTois2(-24614)] = function(...)
			AldyToih2.OriginalStop(...);
		end;
end;
function AldyToih2.Enable()
	if not AldyToih2.Disabled then
		return;
	end;
	AldyToih2[AldyTois2(-24463)] = false;
	AldyToih2[AldyTois2(-24370)]();
	AldyToih2[AldyTois2(-24616)][AldyTois2(-24410)] = AldyToih2.OriginalPlay;
	AldyToih2[AldyTois2(-24616)].Stop = AldyToih2.OriginalStop;
end;
local AldyToit2 = AldyToiT:Toggle({ Title = AldyTois2(-24438), Default = false, Callback = function(AldyToiq)
			if AldyToiq then
				AldyToih2.Disable();
			else
				AldyToih2[AldyTois2(-24403)]();
			end;
			AldyToiS:Save();
		end });
AldyToiS:Register("\067\117\116\115\099\101\110\101\084\111\103\103\108\101", AldyToit2);
local AldyToif2 = AldyToiT:Toggle({ [AldyTois2(-24332)] = "\070\105\115\104\105\110\103 \082\097\100\097\114", Default = false, [AldyTois2(-24429)] = function(AldyToiq)
			local AldyToiH = require(AldyToiW[AldyTois2(-24316)].Net);
			local AldyToic = AldyToiH:RemoteFunction("\085\112\100\097\116\101\070\105\115\104\105\110\103\082\097\100\097\114");
			AldyToic:InvokeServer(AldyToiq);
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24645), AldyToif2);
local AldyToie2 = AldyToiT:Toggle({ [AldyTois2(-24332)] = "\065\117\116\111 \083\097\118\101 \038 \082\101\115\116\111\114\101 \076\097\115\116 \080\111\115\105\116\105\111\110", [AldyTois2(-24607)] = false, Callback = function(AldyToiq)
			AldyToiSk = AldyToiq;
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24251), AldyToie2);
local AldyToiK2 = AldyToiT:Toggle({ [AldyTois2(-24332)] = AldyTois2(-24511), [AldyTois2(-24607)] = false, Callback = function(AldyToiq)
			AldyToiRk.enabled = AldyToiq;
			if not AldyToiq then
				AldyToiRk[AldyTois2(-24174)] = nil;
			elseif AldyToiY.autoFishing and (AldyToiL.Character and AldyToiL.Character.PrimaryPart) then
				AldyToiRk[AldyTois2(-24174)] = AldyToiL.Character[AldyTois2(-24510)][AldyTois2(-24639)];
			end;
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24580), AldyToiK2);
task[AldyTois2(-24489)](function()
	while task.wait() do
		if AldyToiRk[AldyTois2(-24468)] and (AldyToiRk[AldyTois2(-24174)] and (AldyToiL[AldyTois2(-24465)] and AldyToiL[AldyTois2(-24465)].PrimaryPart)) then
			AldyToiL[AldyTois2(-24465)].PrimaryPart.CFrame = AldyToiRk[AldyTois2(-24174)];
		end;
	end;
end);
local AldyToix2 = false;
AldyToiqk:Section({ Title = AldyTois2(-24346) });
AldyToiqk:Paragraph({
	[AldyTois2(-24332)] = AldyTois2(-24166),
	Desc = "\104\116\116\112\115\058\047\047\100\105\115\099\111\114\100\046\103\103\047\097\117\080\085\071\071\057\100\121\119",
	Image = "\109\101\115\115\097\103\101-\115\113\117\097\114\101",
	[AldyTois2(-24180)] = Color3.fromHex("\035\053\056\054\053\070\050"),
	Buttons = { {
			[AldyTois2(-24332)] = "\067\111\112\121 \076\105\110\107",
			[AldyTois2(-24189)] = AldyTois2(-24551),
			[AldyTois2(-24595)] = "\084\101\114\116\105\097\114\121",
			Callback = function()
				setclipboard("\104\116\116\112\115\058\047\047\100\105\115\099\111\114\100\046\103\103\047\097\117\080\085\071\071\057\100\121\119");
				AldyToiq:Notify({ [AldyTois2(-24332)] = AldyTois2(-24199), [AldyTois2(-24280)] = AldyTois2(-24549), Duration = 1 });
			end,
		} },
});
AldyToiqk:Paragraph({
	[AldyTois2(-24332)] = "\071\105\116\072\117\098",
	Desc = AldyTois2(-24305),
	[AldyTois2(-24425)] = "\115\101\110\100",
	[AldyTois2(-24180)] = Color3[AldyTois2(-24603)](AldyTois2(-24254)),
	[AldyTois2(-24258)] = { {
			Title = AldyTois2(-24420),
			[AldyTois2(-24189)] = "\099\111\112\121",
			Variant = AldyTois2(-24430),
			[AldyTois2(-24429)] = function()
				setclipboard("\104\116\116\112\115\058\047\047\103\105\116\104\117\098\046\099\111\109\047\097\108\100\121\106\114\122");
				AldyToiq:Notify({ Title = "\067\111\112\105\101\100\033", Content = AldyTois2(-24474), Duration = 1 });
			end,
		} },
});
AldyToiHk:Section({ [AldyTois2(-24332)] = AldyTois2(-24252) });
AldyToiHk:Paragraph({ [AldyTois2(-24332)] = "\240\159\134\148 \080\108\097\121\101\114 \073\068", [AldyTois2(-24415)] = tostring(AldyToiL[AldyTois2(-24291)]), Buttons = { {
			[AldyTois2(-24332)] = AldyTois2(-24269),
			[AldyTois2(-24189)] = "\099\111\112\121",
			Variant = "\084\101\114\116\105\097\114\121",
			[AldyTois2(-24429)] = function()
				setclipboard(tostring(AldyToiL.UserId));
			end,
		} } });
AldyToiHk:Section({ Title = AldyTois2(-24336) });
local AldyToiY2 = AldyToiHk:Paragraph({ Title = AldyTois2(-24176), [AldyTois2(-24415)] = #AldyToiH:GetPlayers() .. (AldyTois2(-24569) .. AldyToiH.MaxPlayers) });
local AldyToiR2 = AldyToiHk:Paragraph({ [AldyTois2(-24332)] = "\240\159\147\161 \080\105\110\103", Desc = AldyTois2(-24627) });
AldyToiHk:Paragraph({ [AldyTois2(-24332)] = "\240\159\143\183\239\184\143 \080\108\097\099\101 \073\068", Desc = tostring(game[AldyTois2(-24389)]), [AldyTois2(-24258)] = { {
			Title = AldyTois2(-24269),
			Icon = AldyTois2(-24551),
			Variant = AldyTois2(-24430),
			[AldyTois2(-24429)] = function()
				setclipboard(tostring(game.PlaceId));
			end,
		} } });
local AldyToiS2;
AldyToiS2 = string[AldyTois2(-24508)]("\104\116\116\112\115\058\047\047\119\119\119\046\114\111\098\108\111\120\046\099\111\109\047\103\097\109\101\115\047\115\116\097\114\116\063\112\108\097\099\101\073\100\061\037\100\038\103\097\109\101\073\110\115\116\097\110\099\101\073\100\061\037\115", game[AldyTois2(-24389)], game[AldyTois2(-24436)]);
AldyToiHk:Paragraph({ [AldyTois2(-24332)] = AldyTois2(-24579), [AldyTois2(-24415)] = AldyTois2(-24418), Buttons = { {
			Title = AldyTois2(-24420),
			Icon = "\108\105\110\107",
			[AldyTois2(-24595)] = AldyTois2(-24319),
			[AldyTois2(-24429)] = function()
				setclipboard(AldyToiS2);
				AldyToiq:Notify({ Title = "\067\111\112\105\101\100\033", [AldyTois2(-24280)] = AldyTois2(-24327) });
			end,
		} } });
local AldyToiz2 = AldyTois2(-24444);
local AldyToid2 = AldyToiHk:Input({ [AldyTois2(-24332)] = "\073\110\112\117\116 \083\101\114\118\101\114 \076\105\110\107", Placeholder = "\069\110\116\101\114 \121\111\117\114 \083\101\114\118\101\114 \076\105\110\107", Callback = function(AldyToiq)
			AldyToiz2 = AldyToiq;
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24249), AldyToid2);
AldyToiHk:Button({ Title = "\074\111\105\110 \083\101\114\118\101\114 \076\105\110\107", [AldyTois2(-24429)] = function()
		local AldyToiH = linkJoin;
		if not AldyToiH or AldyToiH == AldyTois2(-24444) then
			AldyToiq:Notify({ Title = AldyTois2(-24556), Content = AldyTois2(-24295), [AldyTois2(-24602)] = 1 });
			return;
		end;
		if AldyToiH:find(AldyTois2(-24475)) and AldyToiH:find(AldyTois2(-24640)) then
			local AldyToic = AldyToiH:match(AldyTois2(-24342));
			local AldyToik = AldyToiH:match("\103\097\109\101\073\110\115\116\097\110\099\101\073\100\061\040\091\037\119\037-\093\043\041");
			if not AldyToic or not AldyToik then
				AldyToiq:Notify({ Title = "\069\114\114\111\114", Content = AldyTois2(-24392), Duration = 2 });
				return;
			end;
			AldyToic = tonumber(AldyToic);
			local AldyToiN, AldyToig = pcall(function()
					AldyToiO:TeleportToPlaceInstance(AldyToic, AldyToik, AldyToiw);
				end);
			if not AldyToiN then
				AldyToiq:Notify({ [AldyTois2(-24332)] = "\084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = tostring(AldyToig), Duration = 2 });
			end;
		elseif AldyToiH:find("\115\104\097\114\101\037\063\099\111\100\101\061") then
			local AldyToic = AldyToiH:match("\099\111\100\101\061\040\091\037\119\093\043\041");
			local AldyToik = game.PlaceId;
			if not AldyToic then
				AldyToiq:Notify({ Title = "\069\114\114\111\114", Content = AldyTois2(-24198), Duration = 2 });
				return;
			end;
			local AldyToiN, AldyToig = pcall(function()
					AldyToiO:TeleportToPrivateServer(AldyToik, AldyToic, { AldyToiw });
				end);
			if not AldyToiN then
				AldyToiq:Notify({ [AldyTois2(-24332)] = "\084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = tostring(AldyToig), [AldyTois2(-24602)] = 2 });
			end;
		else
			AldyToiq:Notify({ Title = AldyTois2(-24315), [AldyTois2(-24280)] = AldyTois2(-24184), [AldyTois2(-24602)] = 2 });
		end;
	end });
local AldyToij2 = os.time() - AldyToiA;
local AldyToiC2 = math[AldyTois2(-24306)](AldyToij2 / 60);
local AldyToiJ2 = AldyToij2 % 60;
task[AldyTois2(-24489)](function()
	while task[AldyTois2(-24376)](10) do
		if AldyToiK[AldyTois2(-24253)] then
			break;
		end;
		local AldyToiq = os[AldyTois2(-24628)]() - AldyToiA;
		local AldyToic = math[AldyTois2(-24306)](AldyToiq / 60);
		local AldyToik = AldyToiq % 60;
		AldyToiY2:SetDesc(tostring(#AldyToiH:GetPlayers()) .. (AldyTois2(-24569) .. tostring(AldyToiH[AldyTois2(-24470)])));
		AldyToiR2:SetDesc(tostring(math.floor((game:GetService("\083\116\097\116\115")).Network.ServerStatsItem[AldyTois2(-24372)]:GetValue())) .. " \109\115");
	end;
end);
local function AldyToir2(AldyToiq, AldyToiH)
	for AldyToiq, AldyToic in ipairs(AldyToiq) do
		if AldyToic == AldyToiH then
			return true;
		end;
	end;
	return false;
end;
local AldyToiT2 = AldyTois2(-24444);
if AldyToiY.priceValue then
	AldyToihk();
end;
local function AldyToiD2(AldyToiq)
	local AldyToiH = AldyToiW:FindFirstChild("\073\116\101\109\115");
	if not AldyToiH then
		return nil;
	end;
	local AldyToic = (AldyToiq:gsub(AldyTois2(-24629), AldyTois2(-24444))):gsub(AldyTois2(-24586), "\037\049");
	local AldyToik, AldyToiw = nil, 0;
	for AldyToiq, AldyToiH in ipairs(AldyToiH:GetChildren()) do
		if AldyToiH:IsA(AldyTois2(-24271)) then
			if AldyToic:find(AldyToiH[AldyTois2(-24642)], 1, true) then
				if #AldyToiH.Name > AldyToiw then
					AldyToiw = #AldyToiH[AldyTois2(-24642)];
					AldyToik = AldyToiH;
				end;
			end;
		end;
	end;
	return AldyToik;
end;
task[AldyTois2(-24489)](function()
	while task.wait(1) do
		local AldyToiq = os.time() - AldyToiA;
		local AldyToiH = math.floor(AldyToiq / 60);
		local AldyToic = AldyToiq % 60;
		AldyToiT2 = string[AldyTois2(-24508)]("\037\100\058\037\048\050\100 \040\077\105\110\117\116\101\115\058\083\101\099\111\110\100\041", AldyToiH, AldyToic);
	end;
end);
AldyToick:Section({ [AldyTois2(-24332)] = "\087\101\098\104\111\111\107 \067\111\110\102\105\103\117\114\097\116\105\111\110" });
local AldyToib2 = AldyToick:Toggle({ Title = AldyTois2(-24576), Default = true, [AldyTois2(-24429)] = function(AldyToiq)
			AldyToiFk[AldyTois2(-24468)] = AldyToiq;
			if not AldyToiq then
				if AldyToiFk.connection and AldyToiFk.connection[AldyTois2(-24427)] then
					AldyToiFk[AldyTois2(-24232)]:Disconnect();
					AldyToiFk[AldyTois2(-24232)] = nil;
				end;
				return;
			end;
			task.spawn(function()
				while AldyToiFk[AldyTois2(-24468)] do
					task.wait(1);
					local AldyToiq = AldyToiL[AldyTois2(-24273)]:FindFirstChild("\083\109\097\108\108 \078\111\116\105\102\105\099\097\116\105\111\110");
					if not (AldyToiq and AldyToiq.Enabled) then
						if AldyToiFk.connection and AldyToiFk.connection.Connected then
							AldyToiFk.connection:Disconnect();
							AldyToiFk.connection = nil;
						end;
					end;
					if AldyToiFk[AldyTois2(-24232)] and AldyToiFk[AldyTois2(-24232)].Connected then
 
					end;
					local AldyToiH = AldyToiq:FindFirstChild("\068\105\115\112\108\097\121", true) and AldyToiq[AldyTois2(-24379)]:FindFirstChild(AldyTois2(-24596), true);
					if AldyToiH then
						local AldyToiq = AldyToiH:FindFirstChild("\073\116\101\109\078\097\109\101", true);
						local AldyToic = AldyToiH:FindFirstChild(AldyTois2(-24597), true);
						if AldyToiq and AldyToic then
							AldyToiFk[AldyTois2(-24232)] = (AldyToiq:GetPropertyChangedSignal(AldyTois2(-24584))):Connect(function()
									local AldyToiH = os[AldyTois2(-24628)]();
									local AldyToik = AldyToiq.Text;
									if AldyToik == AldyTois2(-24444) or AldyToik == AldyToiFk[AldyTois2(-24250)] then
										return;
									end;
									AldyToiFk.lastFish = AldyToik;
									AldyToiFk.lastSend = AldyToiH;
									local AldyToiN = AldyToiD2(AldyToik);
									if not AldyToiN then
										return;
									end;
									local AldyToig, AldyToiO = pcall(require, AldyToiN);
									if not (AldyToig and (AldyToiO and AldyToiO[AldyTois2(-24203)])) then
										return;
									end;
									local AldyToiW = AldyToiO.Probability.Chance;
									local AldyToiQ = AldyToiO[AldyTois2(-24203)][AldyTois2(-24222)];
									local AldyToiV = AldyToiO.UUID;
									local AldyToim = AldyToiu[AldyTois2(-24550)](nil, AldyToiW);
									local AldyToiB = AldyToim.Name;
									if AldyToir2(AldyToiFk.selectedTiers, AldyToiB) then
										return;
									end;
									local AldyToiP = AldyToiO[AldyTois2(-24203)][AldyTois2(-24189)] and AldyToiO.Data.Icon:match(AldyTois2(-24516));
									local AldyToip = AldyToiO.SellPrice;
									local AldyToii = AldyToic.Text;
									local AldyToiI = AldyToik:match(AldyTois2(-24308));
									local AldyToin = AldyToik:gsub("\037\115\042\037\098\040\041\037\115\042\036", "");
									local AldyToiF, AldyToiy = "\085\110\107\110\111\119\110", "\085\110\107\110\111\119\110";
									local AldyToia = AldyToiL:FindFirstChild(AldyTois2(-24282));
									if AldyToia and AldyToia:FindFirstChild(AldyTois2(-24216)) then
										AldyToiF = tostring(AldyToia.Caught.Value);
									end;
									if AldyToiX then
										local AldyToiq = AldyToiX:FindFirstChild("\068\105\115\112\108\097\121");
										local AldyToiH = AldyToiq and AldyToiq:FindFirstChild(AldyTois2(-24669));
										local AldyToic = AldyToiH and AldyToiH:FindFirstChild("\066\097\103\083\105\122\101");
										if AldyToic and AldyToic:IsA(AldyTois2(-24272)) then
											AldyToiy = AldyToic[AldyTois2(-24584)];
											local AldyToiq = AldyToiy:match("\094\040\037\100\043\041");
											local AldyToiH = tonumber(AldyToiq);
											if AldyToiH and AldyToiH >= 4990 then
												AldyToibk();
											end;
										end;
									end;
									local AldyToio = ((((AldyToiw:WaitForChild(AldyTois2(-24273))):WaitForChild("\069\118\101\110\116\115")):WaitForChild("\070\114\097\109\101")):WaitForChild("\067\117\114\114\101\110\099\121\067\111\117\110\116\101\114")):WaitForChild("\067\111\117\110\116\101\114");
									local AldyToiU = AldyToio.Text or "\048";
									AldyToiXk({
										discordId = AldyToiFk[AldyTois2(-24276)],
										robloxUsername = AldyToiL.Name,
										[AldyTois2(-24445)] = AldyToin,
										weight = AldyToiI,
										[AldyTois2(-24386)] = AldyToii,
										[AldyTois2(-24501)] = AldyToiP,
										tierName = AldyToiB,
										[AldyTois2(-24626)] = AldyToip,
										totalCaught = AldyToiF,
										[AldyTois2(-24313)] = AldyToiy,
										totalCoin = AldyToiU,
										totalPlay = AldyToiT2,
									});
								end);
						end;
					end;
				end;
			end);
		end });
AldyToiS:Register("\101\110\097\098\108\101\087\101\098\104\111\111\107", AldyToib2);
local AldyToil2 = {
		"\067\111\109\109\111\110",
		"\085\110\099\111\109\109\111\110",
		AldyTois2(-24623),
		"\069\112\105\099",
		"\076\101\103\101\110\100\097\114\121",
		"\077\121\116\104\105\099",
		"\083\069\067\082\069\084",
	};
(getgenv())[AldyTois2(-24349)] = AldyToick:Dropdown({
		Title = AldyTois2(-24615),
		[AldyTois2(-24449)] = AldyToil2,
		Multi = true,
		[AldyTois2(-24478)] = false,
		Value = {},
		Callback = function(AldyToiq)
			for AldyToiq, AldyToiH in ipairs(AldyToiq) do
				AldyToiFk[AldyTois2(-24568)][AldyToiH] = true;
			end;
		end,
	});
AldyToiS:Register(AldyTois2(-24349), (getgenv())[AldyTois2(-24349)]);
(getgenv()).DiscordId = AldyToick:Input({ Title = AldyTois2(-24570), Placeholder = AldyTois2(-24534), Callback = function(AldyToiq)
			AldyToiFk.discordId = value:match(AldyTois2(-24516)) or AldyTois2(-24444);
			AldyToiS:Save();
		end });
AldyToiS:Register(AldyTois2(-24422), (getgenv()).DiscordId);
(getgenv())[AldyTois2(-24172)] = AldyToick:Input({ [AldyTois2(-24332)] = AldyTois2(-24287), Placeholder = AldyTois2(-24201), [AldyTois2(-24429)] = function(AldyToiq)
			local AldyToiH = AldyToiq:match(AldyTois2(-24586)) or "";
			AldyToiFk[AldyTois2(-24172)] = AldyToiH;
		end });
AldyToiS:Register("\099\117\115\116\111\109\085\114\108", (getgenv()).customUrl);
do
	local AldyToiq = {
			[AldyTois2(-24498)] = nil,
			selectedPlayerId = nil,
			[AldyTois2(-24283)] = nil,
			itemQty = 0,
			[AldyTois2(-24529)] = false,
			[AldyTois2(-24294)] = false,
		};
	AldyToiD:Section({ Title = "\065\117\116\111 \084\114\097\100\101 \066\121 \084\105\101\114" });
	local AldyToic, AldyToiN, AldyToig;
	local AldyToiO = false;
	local function AldyToiQ()
		if AldyToiO then
			return true;
		end;
		local AldyToiq = pcall(function()
				AldyToiN = require((AldyToiW:WaitForChild(AldyTois2(-24316))):WaitForChild("\082\101\112\108\105\111\110"));
				AldyToig = require((AldyToiW:WaitForChild("\083\104\097\114\101\100")):WaitForChild(AldyTois2(-24412)));
				AldyToic = require((AldyToiW:WaitForChild("\077\111\100\117\108\101\115")):WaitForChild(AldyTois2(-24414)));
			end);
		if AldyToiq then
			AldyToiO = true;
			return true;
		end;
		return false;
	end;
	local AldyToiV = {};
	local AldyToim = {};
	local AldyToiB;
	local function AldyToiP()
		local AldyToiq = {};
		for AldyToiH, AldyToic in ipairs(AldyToiH:GetPlayers()) do
			if AldyToic ~= AldyToiL then
				table.insert(AldyToiq, AldyToic.Name);
			end;
		end;
		table[AldyTois2(-24633)](AldyToiq);
		return AldyToiq;
	end;
	AldyToiB = AldyToiD:Paragraph({ Title = AldyTois2(-24566), Desc = AldyTois2(-24259) });
	if not AldyToiQ() then
		if AldyToiB then
			AldyToiB:SetDesc(AldyTois2(-24334));
		end;
		return;
	end;
	(getgenv())[AldyTois2(-24554)] = function(AldyToiq)
			if type(AldyToiq) == "\116\097\098\108\101" then
				AldyToiq = AldyToiq[1];
			end;
			if type(AldyToiq) == "\115\116\114\105\110\103" then
				return AldyToiq:match("\094\040\046-\041\037\115\042\037\040\037\100\043\120\037\041\036") or AldyToiq:match(AldyTois2(-24488)) or AldyToiq;
			end;
			return nil;
		end;
	(getgenv()).inventoryCacheTier = (getgenv())[AldyTois2(-24431)] or { [AldyTois2(-24170)] = {}, [AldyTois2(-24486)] = {}, [AldyTois2(-24298)] = {} };
	local AldyToip = {};
	local AldyToii = {};
	local AldyToiI = {};
	local function AldyToin(AldyToiq)
		local AldyToiH = {};
		for AldyToiq, AldyToic in pairs(AldyToiq) do
			table[AldyTois2(-24620)](AldyToiH, AldyToiq);
		end;
		return AldyToiH;
	end;
	local AldyToiF = {};
	local AldyToiX = {};
	local AldyToiy = {};
	local function AldyToia(AldyToic, AldyToiN)
		local AldyToig, AldyToiO = 0, 0;
		task.spawn(function()
			if not AldyToiQ() then
				AldyToiB:SetDesc("\069\114\114\111\114\058 \099\097\110\'\116 \102\105\110\100 \109\111\100\117\108\101\115\044 \112\108\101\097\115\101 \099\111\110\116\097\099\116 \097\100\109\105\110\046");
				return;
			end;
			local AldyToiL = AldyToiw.Character;
			local AldyToiV = AldyToiL and AldyToiL:FindFirstChild(AldyTois2(-24263));
			local AldyToim = AldyToik:FindFirstChild("\067\104\097\114\097\099\116\101\114\115");
			local AldyToiP = AldyToim:FindFirstChild(AldyToiq[AldyTois2(-24498)]);
			if not AldyToiP or not AldyToiq[AldyTois2(-24318)] then
				AldyToiB:SetDesc(AldyTois2(-24233));
				return;
			end;
			local AldyToip = AldyToiH:GetPlayerFromCharacter(AldyToiP);
			if not AldyToip then
				AldyToiB:SetDesc("\069\114\114\111\114\058 \116\097\114\103\101\116 \112\108\097\121\101\114 \105\110\118\097\108\105\100\046");
				return;
			end;
			local AldyToii = AldyToiP:FindFirstChild(AldyTois2(-24263));
			if not AldyToii then
				AldyToiB:SetDesc("\069\114\114\111\114\058 \099\097\110\'\116 \102\105\110\100 \116\097\114\103\101\116 \112\111\115\105\116\105\111\110\046");
				return;
			end;
			AldyToiV[AldyTois2(-24639)] = AldyToii[AldyTois2(-24639)];
			local AldyToiI = ((((AldyToiW:WaitForChild(AldyTois2(-24316))):WaitForChild(AldyTois2(-24407))):WaitForChild("\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048")):WaitForChild("\110\101\116")):WaitForChild(AldyTois2(-24328));
			for AldyToiH, AldyToik in ipairs(AldyToiN) do
				local AldyToiw = (getgenv()).filterRegex(AldyToik) or AldyToik;
				local AldyToiN = (getgenv()).inventoryCacheTier[AldyToic] and (getgenv())[AldyTois2(-24431)][AldyToic][AldyToiw];
				if not AldyToiN or #AldyToiN == 0 then
					AldyToiB:SetDesc("\078\111 \105\116\101\109\115 \102\111\117\110\100 \102\111\114 " .. AldyToik);
				end;
				for AldyToiH, AldyToiw in ipairs(AldyToiN) do
					if not AldyToiq["\097\117\116\111\084\114\097\100\101\095" .. AldyToic] then
						AldyToiB:SetDesc("\084\114\097\100\101 \115\116\111\112\112\101\100 \102\111\114 " .. AldyToic);
						return;
					end;
					local AldyToiW, AldyToiL = pcall(AldyToiI.InvokeServer, AldyToiI, AldyToiq.selectedPlayerId, AldyToiw);
					if AldyToiW and AldyToiL then
						AldyToig = AldyToig + 1;
					else
						AldyToiO = AldyToiO + 1;
					end;
					AldyToiB:SetDesc(string[AldyTois2(-24508)](AldyTois2(-24618), AldyToic, AldyToik, AldyToiH, #AldyToiN, AldyToig, AldyToiO));
					task[AldyTois2(-24376)](3);
				end;
			end;
			AldyToiB:SetDesc(string.format("\091\037\115\093 \084\114\097\100\101 \067\111\109\112\108\101\116\101\046 \083\117\099\099\101\115\115\058 \037\100 \124 \070\097\105\108\101\100\058 \037\100", AldyToic, AldyToig, AldyToiO));
		end);
	end;
	local AldyToiu = {};
	local AldyToio = {};
	local AldyToiU = {};
	local AldyToiG = false;
	local AldyToiv = false;
	local AldyToiZ = false;
	(getgenv()).oldNamecall = hookmetamethod(game, "\095\095\110\097\109\101\099\097\108\108", newcclosure(function(AldyToiq, ...)
			local AldyToiH = getnamecallmethod();
			local AldyToic = { ... };
			if AldyToiH == "\070\105\114\101\083\101\114\118\101\114" and tostring(AldyToiq) == AldyTois2(-24635) then
				return nil;
			end;
			return (getgenv()).oldNamecall(AldyToiq, unpack(AldyToic));
		end));
	AldyToiD:Section({ Title = "\065\117\116\111 \084\114\097\100\101" });
	local AldyToiA = AldyToiD:Dropdown({
			[AldyTois2(-24332)] = AldyTois2(-24317),
			Values = { "\083\101\108\101\099\116 \070\105\115\104 \111\114 \067\108\105\099\107 \082\101\102\114\101\115\104" },
			[AldyTois2(-24636)] = true,
			[AldyTois2(-24478)] = true,
			Callback = function(AldyToiH)
				AldyToiq[AldyTois2(-24283)] = AldyToiH;
			end,
		});
	local AldyToih = AldyToiD:Dropdown({
			Title = AldyTois2(-24351),
			[AldyTois2(-24449)] = AldyToiP(),
			[AldyTois2(-24478)] = true,
			Callback = function(AldyToic)
				AldyToiq.selectedPlayerName = AldyToic;
				if AldyToic then
					local AldyToik = AldyToiH:FindFirstChild(AldyToic);
					AldyToiq[AldyTois2(-24318)] = AldyToik and AldyToik.UserId or nil;
				else
					AldyToiq[AldyTois2(-24318)] = nil;
				end;
			end,
		});
	(getgenv())[AldyTois2(-24456)] = AldyToiN.Client:WaitReplion(AldyTois2(-24203));
	local AldyToit = (getgenv())[AldyTois2(-24456)]:Get({ AldyTois2(-24669), AldyTois2(-24363) });
	(getgenv()).refreshInventory = function()
			local AldyToiq = {};
			AldyToiV = {};
			AldyToim = {};
			if not AldyToit then
				return;
			end;
			for AldyToiH, AldyToik in ipairs(AldyToit) do
				local AldyToiw = AldyToig:GetItemData(AldyToik[AldyTois2(-24192)]);
				if AldyToiw and (AldyToiw.Data and (AldyToiw[AldyTois2(-24203)][AldyTois2(-24395)] == AldyTois2(-24413) or AldyToiw[AldyTois2(-24203)][AldyTois2(-24395)] == "\069\110\099\104\097\110\116\083\116\111\110\101\115")) then
					if not AldyToik[AldyTois2(-24404)] then
						local AldyToiH = AldyToic.GetItemName(AldyToik, AldyToiw);
						if not AldyToiq[AldyToiH] then
							AldyToiq[AldyToiH] = 0;
							AldyToiV[AldyToiH] = {};
						end;
						AldyToiq[AldyToiH] = AldyToiq[AldyToiH] + 1;
						table.insert(AldyToiV[AldyToiH], AldyToik.UUID);
					end;
				end;
			end;
			for AldyToiq, AldyToiH in pairs(AldyToiq) do
				table[AldyTois2(-24620)](AldyToim, string[AldyTois2(-24508)]("\037\115 \040\081\116\121 \058 \037\100\041", AldyToiq, AldyToiH));
			end;
			table[AldyTois2(-24633)](AldyToim);
			AldyToiA:Refresh(AldyToim);
			AldyToih:Refresh(AldyToiP());
		end;
	(getgenv())[AldyTois2(-24361)]();
	(getgenv()).refreshTierInventory();
	AldyToiD:Button({ Title = "\082\101\108\111\097\100 \066\097\099\107\112\097\099\107 \038 \080\108\097\121\101\114\115", Callback = function()
			(getgenv()).refreshInventory();
			(getgenv())[AldyTois2(-24593)]();
		end });
	AldyToiD:Input({
		[AldyTois2(-24332)] = AldyTois2(-24248),
		[AldyTois2(-24239)] = AldyTois2(-24506),
		Type = AldyTois2(-24230),
		[AldyTois2(-24429)] = function(AldyToiH)
			AldyToiq[AldyTois2(-24469)] = tonumber(AldyToiH) or 0;
		end,
	});
	AldyToiH[AldyTois2(-24668)]:Connect(function()
		if AldyToih and not AldyToih[AldyTois2(-24625)] then
			AldyToih:Refresh(AldyToiP());
		end;
	end);
	AldyToiH.PlayerRemoving:Connect(function()
		if AldyToih and not AldyToih[AldyTois2(-24625)] then
			AldyToih:Refresh(AldyToiP());
		end;
	end);
	AldyToiD:Toggle({ [AldyTois2(-24332)] = "\083\116\097\114\116 \084\114\097\100\101\033", [AldyTois2(-24402)] = false, [AldyTois2(-24429)] = function(AldyToic)
			AldyToiq[AldyTois2(-24529)] = AldyToic;
			if AldyToic then
				local AldyToic, AldyToiN = 0, 0;
				task[AldyTois2(-24489)](function()
					if not AldyToiQ() then
						AldyToiB:SetDesc("\069\114\114\111\114\058 \099\097\110\'\116 \102\105\110\100 \109\111\100\117\108\101\115\044 \112\108\101\097\115\101 \099\111\110\116\097\099\116 \097\100\109\105\110\046");
						AldyToiq[AldyTois2(-24529)] = false;
						return;
					end;
					local AldyToig = AldyToiw[AldyTois2(-24465)];
					local AldyToiO = AldyToig and AldyToig:FindFirstChild(AldyTois2(-24263));
					local AldyToiL = AldyToik:FindFirstChild("\067\104\097\114\097\099\116\101\114\115");
					local AldyToim = AldyToiL:FindFirstChild(AldyToiq[AldyTois2(-24498)]);
					if AldyToiq.selectedPlayerId then
						AldyToiB:SetDesc(AldyTois2(-24236));
						AldyToiq[AldyTois2(-24529)] = false;
						return;
					end;
					local AldyToiP = AldyToiq.selectedItemName;
					local AldyToip = (getgenv())[AldyTois2(-24554)](AldyToiP) or AldyToiP;
					local AldyToii = AldyToiV[AldyToip];
					if not AldyToii or #AldyToii == 0 then
						AldyToiB:SetDesc("\078\111 \105\116\101\109\115 \102\111\117\110\100 \102\111\114 " .. AldyToip);
					end;
					if not AldyToii or #AldyToii < AldyToiq[AldyTois2(-24469)] then
						AldyToiB:SetDesc({ [AldyTois2(-24332)] = AldyTois2(-24315), [AldyTois2(-24280)] = "\078\111\116 \101\110\111\117\103\104 \105\116\101\109\115 \102\111\114 " .. AldyToip });
						AldyToiq.autoTradeStart = false;
						return;
					end;
					local AldyToiI = AldyToiH:GetPlayerFromCharacter(AldyToim);
					if not AldyToiI then
						AldyToiB:SetDesc(AldyTois2(-24183));
						return;
					end;
					local AldyToin = AldyToim:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
					if not AldyToin then
						AldyToiB:SetDesc(AldyTois2(-24337));
						return;
					end;
					AldyToiO[AldyTois2(-24639)] = AldyToin.CFrame;
					local AldyToiF = ((((AldyToiW:WaitForChild("\080\097\099\107\097\103\101\115")):WaitForChild(AldyTois2(-24407))):WaitForChild(AldyTois2(-24240))):WaitForChild(AldyTois2(-24309))):WaitForChild("\082\070\047\073\110\105\116\105\097\116\101\084\114\097\100\101");
					for AldyToiH, AldyToik in ipairs(AldyToii) do
						if not AldyToiq[AldyTois2(-24529)] then
							AldyToiB:SetDesc(AldyTois2(-24528));
							return;
						end;
						local AldyToiw, AldyToig = pcall(AldyToiF[AldyTois2(-24394)], AldyToiF, AldyToiq.selectedPlayerId, AldyToik);
						if AldyToiw and AldyToig then
							AldyToic = AldyToic + 1;
							AldyToiB:SetDesc(string[AldyTois2(-24508)]("\091\037\115\093 \083\117\099\099\101\115\115\058 \037\100 \124 \070\097\105\108\058 \037\100", AldyToip, AldyToic, AldyToiN));
						else
							AldyToiN = AldyToiN + 1;
							AldyToiB:SetDesc(string[AldyTois2(-24508)](AldyTois2(-24637), AldyToip, AldyToic, AldyToiN));
						end;
						task[AldyTois2(-24376)](3);
					end;
					AldyToiB:SetDesc(string.format("\226\156\133 \065\108\108 \084\114\097\100\101\115 \067\111\109\112\108\101\116\101\046\n\083\117\099\099\101\115\115\058 \037\100 \124 \070\097\105\108\101\100\058 \037\100", AldyToic, AldyToiN));
					AldyToiq[AldyTois2(-24529)] = false;
					(getgenv()).refreshInventory();
				end);
			end;
		end });
end;
do
	local AldyToiq = { [AldyTois2(-24468)] = false, selectedWeathers = {} };
	local AldyToiH = {
			{ [AldyTois2(-24642)] = "\087\105\110\100", [AldyTois2(-24302)] = 10000 },
			{ Name = "\083\110\111\119", [AldyTois2(-24302)] = 15000 },
			{ [AldyTois2(-24642)] = "\067\108\111\117\100\121", [AldyTois2(-24302)] = 20000 },
			{ [AldyTois2(-24642)] = "\083\116\111\114\109", [AldyTois2(-24302)] = 35000 },
			{ Name = AldyTois2(-24322), Price = 50000 },
			{ [AldyTois2(-24642)] = "\083\104\097\114\107 \072\117\110\116", [AldyTois2(-24302)] = 300000 },
		};
	table[AldyTois2(-24633)](AldyToiH, function(AldyToiq, AldyToiH)
		return AldyToiq[AldyTois2(-24302)] < AldyToiH[AldyTois2(-24302)];
	end);
	local AldyToic = {};
	for AldyToiq, AldyToiH in ipairs(AldyToiH) do
		table.insert(AldyToic, AldyToiH.Name);
	end;
	local function AldyToik()
		if not AldyToiq[AldyTois2(-24468)] or #AldyToiq.selectedWeathers == 0 then
			return;
		end;
		for AldyToiq, AldyToiH in ipairs(AldyToiq[AldyTois2(-24355)]) do
			pcall(function()
				((((((game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101")):WaitForChild(AldyTois2(-24316))):WaitForChild("\095\073\110\100\101\120")):WaitForChild("\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048")):WaitForChild("\110\101\116")):WaitForChild("\082\070\047\080\117\114\099\104\097\115\101\087\101\097\116\104\101\114\069\118\101\110\116")):InvokeServer(AldyToiH);
			end);
			task[AldyTois2(-24376)](1);
		end;
	end;
	local AldyToiw = AldyToiM:Toggle({ Title = AldyTois2(-24564), Value = false, [AldyTois2(-24429)] = function(AldyToiH)
				AldyToiq[AldyTois2(-24468)] = AldyToiH;
				if AldyToiH then
					AldyToik();
					task.spawn(function()
						while AldyToiq.enabled do
							task.wait(500);
							if not AldyToiq[AldyTois2(-24468)] then
								break;
							end;
							AldyToik();
						end;
					end);
				end;
			end });
	AldyToiS:Register("\097\117\116\111\066\117\121\087\101\097\116\104\101\114\084\111\103\103\108\101", AldyToiw);
	local AldyToiN = AldyToiM:Dropdown({
			[AldyTois2(-24332)] = "\083\101\108\101\099\116 \087\101\097\116\104\101\114",
			Values = AldyToic,
			[AldyTois2(-24636)] = true,
			[AldyTois2(-24478)] = true,
			Callback = function(AldyToiH)
				AldyToiq.selectedWeathers = AldyToiH;
			end,
		});
	AldyToiS:Register("\097\117\116\111\066\117\121\087\101\097\116\104\101\114\068\114\111\112\100\111\119\110", AldyToiN);
	AldyToiM:Section({ [AldyTois2(-24332)] = "\067\108\105\099\107 \084\111 \066\117\121" });
	for AldyToiq, AldyToiH in ipairs(AldyToiH) do
		local AldyToic = string.format("\037\115 \040\037\115\041", AldyToiH.Name, AldyToiH[AldyTois2(-24302)]);
		AldyToiM:Button({ Title = AldyToic, Callback = function()
				pcall(function()
					((((((game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101")):WaitForChild(AldyTois2(-24316))):WaitForChild(AldyTois2(-24407))):WaitForChild("\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048")):WaitForChild("\110\101\116")):WaitForChild(AldyTois2(-24353))):InvokeServer(AldyToiH.Name);
				end);
			end });
	end;
end;
do
	(getgenv())[AldyTois2(-24670)] = AldyToil:Paragraph({ Title = AldyTois2(-24566), [AldyTois2(-24415)] = "\087\097\105\116\105\110\103 \116\111 \115\116\097\114\116 \101\110\099\104\097\110\116", Color = AldyTois2(-24471) });
	local AldyToiq = Vector3[AldyTois2(-24169)](3231, -1303, 1402);
	local AldyToiH = (AldyToiW:WaitForChild("\067\111\110\116\114\111\108\108\101\114\115")):WaitForChild("\069\110\099\104\097\110\116\105\110\103\067\111\110\116\114\111\108\108\101\114");
	local AldyToic = AldyToiW:WaitForChild("\069\110\099\104\097\110\116\115");
	local function AldyToiN()
		local AldyToiq = {};
		for AldyToiH, AldyToic in ipairs(AldyToic:GetChildren()) do
			if AldyToic:IsA(AldyTois2(-24271)) then
				local AldyToiH = require(AldyToic);
				if AldyToiH and (AldyToiH.Data and AldyToiH[AldyTois2(-24203)].Name) then
					table.insert(AldyToiq, AldyToiH.Data[AldyTois2(-24642)]);
				end;
			end;
		end;
		table[AldyTois2(-24633)](AldyToiq);
		return AldyToiq;
	end;
	local AldyToig = {};
	local AldyToiO = false;
	local function AldyToiL()
		local AldyToiq = AldyToiP:Get("\073\110\118\101\110\116\111\114\121");
		if not AldyToiq or not AldyToiq[AldyTois2(-24363)] then
			return nil;
		end;
		for AldyToiq, AldyToiH in pairs(AldyToiq.Items) do
			if type(AldyToiH) == "\116\097\098\108\101" and AldyToiH[AldyTois2(-24192)] == 10 then
				return tostring(AldyToiH[AldyTois2(-24617)]);
			end;
		end;
		return nil;
	end;
	AldyToil:Dropdown({
		[AldyTois2(-24332)] = "\083\101\108\101\099\116 \069\110\099\104\097\110\116",
		Values = AldyToiN(),
		Multi = true,
		[AldyTois2(-24478)] = false,
		[AldyTois2(-24402)] = {},
		[AldyTois2(-24429)] = function(AldyToiq)
			AldyToig = AldyToiq or {};
			if #AldyToig > 0 then
				(getgenv()).statusEnchant:SetDesc(AldyTois2(-24338) .. table[AldyTois2(-24600)](AldyToig, AldyTois2(-24500)));
			else
				(getgenv())[AldyTois2(-24670)]:SetDesc("\226\157\140 \069\114\114\111\114\058 \078\111 \069\110\099\104\097\110\116 \115\101\108\101\099\116\101\100\046");
			end;
		end,
	});
	local function AldyToiQ(AldyToiq, AldyToiH)
		for AldyToiq, AldyToic in ipairs(AldyToiq) do
			if AldyToic == AldyToiH then
				return true;
			end;
		end;
		return false;
	end;
	local function AldyToiV(AldyToiq, AldyToiH)
		return table.concat(AldyToiq, AldyToiH or "\044 ");
	end;
	AldyToil:Toggle({ [AldyTois2(-24332)] = "\083\116\097\114\116 \069\110\099\104\097\110\116 \082\111\100", [AldyTois2(-24607)] = false, [AldyTois2(-24429)] = function(AldyToiH)
			if AldyToiH then
				if #AldyToig == 0 then
					(getgenv())[AldyTois2(-24670)]:SetDesc(AldyTois2(-24434));
					return;
				end;
				AldyToiO = true;
				(getgenv()).statusEnchant:SetDesc(AldyTois2(-24660) .. AldyToiV(AldyToig));
				local AldyToiH = (AldyToik:WaitForChild(AldyTois2(-24458))):FindFirstChild(AldyToiw[AldyTois2(-24642)]);
				local AldyToic = AldyToiH and AldyToiH:FindFirstChild(AldyTois2(-24263));
				if AldyToic then
					AldyToic.CFrame = CFrame.new(AldyToiq);
				end;
				task[AldyTois2(-24489)](function()
					while AldyToiO do
						local AldyToiq = AldyToiL();
						if not AldyToiq then
							(getgenv()).statusEnchant:SetDesc("\226\157\140 \066\097\116\117 \104\097\098\105\115\033 \066\101\114\104\101\110\116\105\046");
							AldyToiO = false;
							break;
						end;
						local AldyToiH = pcall(function()
								AldyToif[AldyTois2(-24464)]:FireServer(AldyToiq, "\069\110\099\104\097\110\116\083\116\111\110\101\115");
								task.wait(.2);
								AldyToif[AldyTois2(-24262)]:FireServer(2);
								task.wait(.2);
								AldyToif[AldyTois2(-24196)]:FireServer();
							end);
						if not AldyToiH then
							(getgenv())[AldyTois2(-24670)]:SetDesc(AldyTois2(-24344));
							AldyToiO = false;
							break;
						end;
						task.wait(1);
					end;
				end);
			else
				AldyToiO = false;
				(getgenv())[AldyTois2(-24670)]:SetDesc("\069\110\099\104\097\110\116\105\110\103 \115\116\111\112\112\101\100\046");
			end;
		end });
	local function AldyToim(AldyToiq)
		for AldyToiH, AldyToic in ipairs(AldyToic:GetChildren()) do
			if AldyToic:IsA("\077\111\100\117\108\101\083\099\114\105\112\116") then
				local AldyToiH = require(AldyToic);
				if AldyToiH and (AldyToiH.Data and AldyToiH[AldyTois2(-24203)].Id == AldyToiq) then
					return AldyToiH;
				end;
			end;
		end;
		return nil;
	end;
	AldyToif[AldyTois2(-24652)][AldyTois2(-24638)]:Connect(function(AldyToiq, AldyToiH, AldyToic, AldyToik)
		if not AldyToiO then
			return;
		end;
		local AldyToiw = AldyToim(AldyToiH);
		if AldyToiw then
			local AldyToiq = AldyToiw[AldyTois2(-24203)].Name;
			if AldyToiQ(AldyToig, AldyToiq) then
				(getgenv())[AldyTois2(-24670)]:SetDesc(AldyTois2(-24482) .. (AldyToiq .. AldyTois2(-24300)));
				AldyToiO = false;
			else
				(getgenv()).statusEnchant:SetDesc("\070\111\117\110\100 \058 " .. (AldyToiq .. "\n\084\114\121 \065\103\097\105\110\046\046\046"));
			end;
		end;
	end);
end;
do
	local AldyToic = {
			[AldyTois2(-24527)] = { [AldyTois2(-24522)] = AldyTois2(-24662), [AldyTois2(-24174)] = Vector3[AldyTois2(-24169)](1014.896, 20.921, 5071.434) },
			["\048\050"] = { [AldyTois2(-24522)] = "\084\114\101\097\115\117\114\101 \082\111\111\109", [AldyTois2(-24174)] = Vector3.new(-3598.539, -279.646, -1634.287) },
			[AldyTois2(-24234)] = { name = "\076\111\115\116 \083\104\111\114\101", [AldyTois2(-24174)] = Vector3[AldyTois2(-24169)](-3677, 107, -912) },
			[AldyTois2(-24591)] = { [AldyTois2(-24522)] = AldyTois2(-24398), position = Vector3[AldyTois2(-24169)](-2.382, 4.5, 2839.47) },
			["\048\053"] = { [AldyTois2(-24522)] = AldyTois2(-24485), position = Vector3[AldyTois2(-24169)](-2051.413, 6.268, 3662) },
			["\048\054"] = { [AldyTois2(-24522)] = "\069\115\111\116\101\114\105\099 \068\101\112\116\104\115", [AldyTois2(-24174)] = Vector3.new(3209.068, -1302.855, 1411.844) },
			[AldyTois2(-24194)] = { [AldyTois2(-24522)] = "\069\115\111\116\101\114\105\099 \073\115\108\097\110\100", position = Vector3[AldyTois2(-24169)](2031.415, 27.397, 1394.621) },
			[AldyTois2(-24544)] = { [AldyTois2(-24522)] = AldyTois2(-24187), [AldyTois2(-24174)] = Vector3.new(-678.811, 4.935, 708.578) },
			[AldyTois2(-24215)] = { [AldyTois2(-24522)] = "\075\111\104\097\110\097 \086\111\108\099\097\110\111", [AldyTois2(-24174)] = Vector3.new(-516.92, 22, 191) },
			[AldyTois2(-24293)] = { name = AldyTois2(-24563), [AldyTois2(-24174)] = Vector3[AldyTois2(-24169)](-3667.556, -135.574, -900.99) },
			["\049\049"] = { [AldyTois2(-24522)] = "\087\101\097\116\104\101\114 \077\097\099\104\105\110\101", position = Vector3.new(-1471, -3, 1929) },
			["\049\050"] = { name = "\087\105\110\116\101\114 \070\101\115\116", position = Vector3[AldyTois2(-24169)](1611, 4, 3280) },
			[AldyTois2(-24460)] = { [AldyTois2(-24522)] = "\067\111\114\097\108 \082\101\101\102\115", position = Vector3[AldyTois2(-24169)](-2949.694, 63.25, 2248.52) },
		};
	local AldyToiN = nil;
	local function AldyToig()
		local AldyToiq = {};
		for AldyToiH, AldyToic in ipairs(AldyToiH:GetPlayers()) do
			if AldyToic ~= AldyToiL then
				table.insert(AldyToiq, AldyToic.Name);
			end;
		end;
		table.sort(AldyToiq);
		return AldyToiq;
	end;
	local AldyToiO = AldyTois:Dropdown({
			[AldyTois2(-24332)] = AldyTois2(-24592),
			[AldyTois2(-24449)] = AldyToig(),
			Multi = false,
			Callback = function(AldyToiq)
				AldyToiN = AldyToiq;
			end,
		});
	local function AldyToiQ(AldyToiH)
		if not AldyToiH or AldyToiH == AldyTois2(-24444) then
			AldyToiq:Notify({ [AldyTois2(-24332)] = "\226\157\140 \069\114\114\111\114", Content = "\078\111 \112\108\097\121\101\114 \115\101\108\101\099\116\101\100\046", Duration = 2 });
			return;
		end;
		local AldyToic = AldyToiw[AldyTois2(-24465)];
		local AldyToiN = AldyToic and AldyToic:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
		if not AldyToiN then
			AldyToiq:Notify({ Title = AldyTois2(-24443), [AldyTois2(-24280)] = AldyTois2(-24406), Duration = 2 });
			return;
		end;
		local AldyToig = AldyToik:FindFirstChild(AldyTois2(-24458));
		if not AldyToig then
			AldyToiq:Notify({ [AldyTois2(-24332)] = AldyTois2(-24443), [AldyTois2(-24280)] = "\'\067\104\097\114\097\099\116\101\114\115\' \102\111\108\100\101\114 \110\111\116 \102\111\117\110\100\046", Duration = 2 });
			return;
		end;
		local AldyToiO = AldyToig:FindFirstChild(AldyToiH);
		if AldyToiO and AldyToiO:FindFirstChild(AldyTois2(-24263)) then
			local AldyToic = AldyToiO[AldyTois2(-24263)];
			local AldyToik = AldyToic.CFrame.RightVector * 5;
			AldyToiN[AldyTois2(-24639)] = AldyToic.CFrame + AldyToik;
			AldyToiq:Notify({ [AldyTois2(-24332)] = "\226\156\133 \084\101\108\101\112\111\114\116\101\100", Content = "\084\101\108\101\112\111\114\116\101\100 \116\111 " .. AldyToiH, [AldyTois2(-24602)] = 2 });
		else
			AldyToiq:Notify({ [AldyTois2(-24332)] = AldyTois2(-24443), Content = AldyTois2(-24299), Duration = 2 });
		end;
	end;
	AldyTois:Button({ Title = AldyTois2(-24191), Callback = function()
			pcall(function()
				AldyToiQ(AldyToiN);
			end);
		end });
	for AldyToiq, AldyToiH in pairs(AldyToic) do
		AldyTois:Button({ [AldyTois2(-24332)] = AldyToiH.name, Callback = function()
				local AldyToiq = AldyToik.Characters:FindFirstChild(AldyToiw[AldyTois2(-24642)]);
				local AldyToic = AldyToiq and AldyToiq:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
				if AldyToic then
					AldyToic[AldyTois2(-24639)] = CFrame[AldyTois2(-24169)](AldyToiH.position + Vector3[AldyTois2(-24169)](5, 5, 0));
					AldyTois:Notify({ [AldyTois2(-24332)] = "\226\156\133 \084\101\108\101\112\111\114\116 \083\117\099\099\101\115\115", [AldyTois2(-24280)] = "\084\101\108\101\112\111\114\116\101\100 \116\111 " .. AldyToiH.name, Duration = 2 });
				else
					AldyTois:Notify({ Title = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", [AldyTois2(-24280)] = AldyTois2(-24565), [AldyTois2(-24602)] = 2 });
				end;
			end });
	end;
	AldyTois:Section({ Title = AldyTois2(-24227) });
	(getgenv()).npcNames = (getgenv()).npcNames or {};
	local function AldyToiV()
		(getgenv())[AldyTois2(-24561)] = (getgenv()).npcFolder or AldyToiW:WaitForChild("\078\080\067");
		for AldyToiq, AldyToiH in ipairs((getgenv())[AldyTois2(-24561)]:GetChildren()) do
			table[AldyTois2(-24620)]((getgenv())[AldyTois2(-24657)], AldyToiH.Name);
		end;
	end;
	local AldyToim = (getgenv())[AldyTois2(-24657)][1] or nil;
	AldyTois:Dropdown({
		Title = AldyTois2(-24268),
		[AldyTois2(-24449)] = (getgenv()).npcNames,
		[AldyTois2(-24636)] = false,
		Default = AldyToim,
		Callback = function(AldyToiq)
			AldyToim = AldyToiq;
		end,
	});
	(getgenv()).teleportToNPC = function(AldyToiq)
			if not AldyToiq then
				AldyTois:Notify({ Title = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", [AldyTois2(-24280)] = AldyTois2(-24323), Duration = 2 });
				return;
			end;
			local AldyToiH = AldyToiw[AldyTois2(-24465)];
			local AldyToic = AldyToiH and AldyToiH:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
			if not AldyToic then
				AldyTois:Notify({ Title = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = "\067\104\097\114\097\099\116\101\114 \111\114 \072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116 \110\111\116 \102\111\117\110\100\046", Duration = 2 });
				return;
			end;
			local AldyToik, AldyToiN = pcall(function()
					return AldyToiq:GetPivot();
				end);
			if AldyToik and typeof(AldyToiN) == "\067\070\114\097\109\101" then
				local AldyToiH = AldyToiN.LookVector;
				local AldyToik = Vector3.new(0, 5, 0) + AldyToiH * 5;
				AldyToic[AldyTois2(-24639)] = AldyToiN + AldyToik;
				AldyTois:Notify({ [AldyTois2(-24332)] = "\226\156\133 \084\101\108\101\112\111\114\116 \083\117\099\099\101\115\115", Content = "\084\101\108\101\112\111\114\116\101\100 \116\111 \078\080\067\058 " .. AldyToiq[AldyTois2(-24642)], Duration = 2 });
			else
				AldyTois:Notify({ [AldyTois2(-24332)] = AldyTois2(-24374), [AldyTois2(-24280)] = "\087\111\114\108\100\080\105\118\111\116 \110\111\116 \097\118\097\105\108\097\098\108\101 \102\111\114 \078\080\067\058 " .. AldyToiq[AldyTois2(-24642)], [AldyTois2(-24602)] = 2 });
			end;
		end;
	AldyTois:Button({ Title = AldyTois2(-24658), [AldyTois2(-24429)] = function()
			if not AldyToim then
				AldyTois:Notify({ Title = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = "\080\108\101\097\115\101 \115\101\108\101\099\116 \097\110 \078\080\067\046", Duration = 2 });
				return;
			end;
			local AldyToiq = npcFolder:FindFirstChild(AldyToim);
			(getgenv()).teleportToNPC(AldyToiq);
		end });
end;
do
	(getgenv()).savedPos = (getgenv())[AldyTois2(-24428)] or nil;
	(getgenv()).automega = (getgenv()).automega or false;
	(getgenv()).isMega = (getgenv())[AldyTois2(-24405)] or false;
	(getgenv())[AldyTois2(-24284)] = function()
			task.spawn(function()
				while task[AldyTois2(-24376)](4) do
					if (getgenv()).automega then
						local AldyToiq = AldyToik:FindFirstChild(AldyTois2(-24655));
						local AldyToiH = nil;
						if AldyToiq then
							for AldyToiq, AldyToic in ipairs(AldyToiq:GetChildren()) do
								if AldyToic.Name == "\080\114\111\112\115" then
									local AldyToiq = AldyToic:FindFirstChild("\077\101\103\097\108\111\100\111\110 \072\117\110\116");
									if AldyToiq then
										for AldyToiq, AldyToic in ipairs(AldyToiq:GetChildren()) do
											if AldyToic:IsA("\066\097\115\101\080\097\114\116") then
												AldyToiH = AldyToic.Position;
												break;
											end;
										end;
									end;
								end;
							end;
						end;
						local AldyToic = AldyToik.Characters:FindFirstChild(AldyToiw.Name);
						local AldyToiN = AldyToic and AldyToic:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
						if AldyToiH and AldyToiN then
							AldyToirk(true);
							AldyToiI2:Set(true);
							(getgenv())[AldyTois2(-24405)] = true;
							local AldyToiq = (AldyToiN.Position - AldyToiH).Magnitude;
							if not (getgenv()).savedPos then
								(getgenv())[AldyTois2(-24428)] = AldyToiN[AldyTois2(-24639)];
							end;
							if AldyToiN.Anchored then
								AldyToiN[AldyTois2(-24350)] = false;
								task.wait(.1);
							end;
							if AldyToiq > 175 then
								AldyToiN.CFrame = CFrame[AldyTois2(-24169)](AldyToiH + Vector3.new(20, 30, 0));
								if AldyToiRk.enabled then
									AldyToiRk[AldyTois2(-24174)] = AldyToiN[AldyTois2(-24639)];
								end;
							end;
							task[AldyTois2(-24376)](1);
							if not AldyToiY[AldyTois2(-24219)] then
								AldyToiY[AldyTois2(-24219)] = true;
								AldyToiMk:Set(true);
								AldyToiYk(true);
							end;
						else
							if (getgenv())[AldyTois2(-24428)] and AldyToiN then
								AldyToiN[AldyTois2(-24639)] = (getgenv())[AldyTois2(-24428)];
								(getgenv())[AldyTois2(-24428)] = nil;
								(getgenv()).isMega = false;
							end;
						end;
					end;
				end;
			end);
		end;
	(getgenv())[AldyTois2(-24284)]();
	AldyToir:Toggle({ Title = AldyTois2(-24207), [AldyTois2(-24607)] = false, [AldyTois2(-24429)] = function(AldyToiq)
			(getgenv()).automega = AldyToiq;
			(getgenv()).autoMegaHandler();
		end });
	(getgenv())[AldyTois2(-24543)] = (getgenv())[AldyTois2(-24543)] or {
			enabled = false,
			selectedEvent = nil,
			[AldyTois2(-24399)] = nil,
			[AldyTois2(-24599)] = nil,
			[AldyTois2(-24421)] = false,
			[AldyTois2(-24214)] = false,
		};
	AldyToir:Section({ [AldyTois2(-24332)] = AldyTois2(-24366) });
	(getgenv())[AldyTois2(-24264)] = {
			AldyTois2(-24290),
			"\065\100\109\105\110 \069\118\101\110\116",
			AldyTois2(-24358),
			AldyTois2(-24577),
			AldyTois2(-24286),
			AldyTois2(-24237),
			AldyTois2(-24557),
			AldyTois2(-24168),
			"\077\101\116\101\111\114 \082\097\105\110",
		};
	AldyToir:Dropdown({
		[AldyTois2(-24332)] = "\083\101\108\101\099\116 \069\118\101\110\116",
		Values = (getgenv()).eventNames,
		[AldyTois2(-24478)] = true,
		Callback = function(AldyToiq)
			(getgenv()).eventSet[AldyTois2(-24490)] = AldyToiq;
		end,
	});
	AldyToir:Toggle({
		[AldyTois2(-24332)] = "\065\117\116\111 \084\101\108\101\112\111\114\116 \083\112\097\119\110\101\100 \069\118\101\110\116",
		Desc = "\065\117\116\111\109\097\116\105\099\097\108\108\121 \116\101\108\101\112\111\114\116\115 \121\111\117 \116\111 \116\104\101 \099\104\111\111\115\101\110 \115\112\097\119\110\101\100 \101\118\101\110\116\046",
		[AldyTois2(-24402)] = false,
		Callback = function(AldyToiq)
			(getgenv()).eventSet.enabled = AldyToiq;
			if not AldyToiq and (getgenv()).eventSet.isAtEvent then
				if AldyToiL and (AldyToiL.Character and (AldyToiL[AldyTois2(-24465)][AldyTois2(-24510)] and (getgenv()).eventSet[AldyTois2(-24399)])) then
					local AldyToiq = AldyToiL.Character.PrimaryPart;
					if AldyToiq[AldyTois2(-24350)] then
						AldyToiq[AldyTois2(-24350)] = false;
						task[AldyTois2(-24376)](.1);
					end;
					AldyToiq.CFrame = (getgenv())[AldyTois2(-24543)][AldyTois2(-24399)];
					if AldyToiRk.enabled then
						AldyToiRk[AldyTois2(-24174)] = AldyToiq[AldyTois2(-24639)];
					end;
				end;
				if (getgenv()).eventSet[AldyTois2(-24599)] then
					(getgenv()).eventSet[AldyTois2(-24599)]:Destroy();
				end;
				(getgenv()).eventSet.platform = nil;
				(getgenv()).eventSet[AldyTois2(-24214)] = false;
			end;
		end,
	});
	local function AldyToiq(AldyToiq)
		local AldyToiH = AldyToik:FindFirstChild("\033\033\033 \077\069\078\085 \082\073\078\071\083");
		if not AldyToiH then
			return nil;
		end;
		local AldyToic = AldyToiq:lower();
		local AldyToiw = nil;
		for AldyToiq, AldyToiH in ipairs(AldyToiH:GetChildren()) do
			if AldyToiH[AldyTois2(-24642)] == "\080\114\111\112\115" then
				for AldyToiq, AldyToik in ipairs(AldyToiH:GetChildren()) do
					if AldyToik.Name:lower() == AldyToic then
						if AldyToik:IsA("\077\111\100\101\108") then
							local AldyToiq = AldyToik.PrimaryPart or AldyToik:FindFirstChildWhichIsA("\066\097\115\101\080\097\114\116");
							if AldyToiq then
								return AldyToiq;
							else
 
							end;
						elseif AldyToik:IsA("\066\097\115\101\080\097\114\116") then
							return AldyToik;
						end;
					end;
					for AldyToiq, AldyToik in ipairs(AldyToik:GetDescendants()) do
						if AldyToik:IsA("\084\101\120\116\076\097\098\101\108") then
							if AldyToik.Text:lower() == AldyToic then
								local AldyToiq = AldyToik;
								while AldyToiq and AldyToiq ~= AldyToiH do
									if AldyToiq:IsA("\066\097\115\101\080\097\114\116") then
										return AldyToiq;
									end;
									AldyToiq = AldyToiq[AldyTois2(-24335)];
								end;
							end;
						end;
					end;
				end;
			end;
		end;
		return nil;
	end;
	task.spawn(function()
		while task[AldyTois2(-24376)](5) do
			if not (getgenv()).eventSet.enabled or not (getgenv())[AldyTois2(-24543)][AldyTois2(-24490)] or not AldyToiL.Character or not AldyToiL[AldyTois2(-24465)].PrimaryPart then
 
			end;
			local AldyToiH = AldyToiL[AldyTois2(-24465)][AldyTois2(-24510)];
			local AldyToic = AldyToiq((getgenv())[AldyTois2(-24543)].selectedEvent);
			if AldyToic and not (getgenv())[AldyTois2(-24543)][AldyTois2(-24214)] then
				(getgenv())[AldyTois2(-24543)].isAtEvent = true;
				(getgenv()).eventSet[AldyTois2(-24421)] = AldyToiY.autoFishing;
				(getgenv())[AldyTois2(-24543)].originalPosition = AldyToiH[AldyTois2(-24639)];
				AldyToirk(true);
				AldyToiI2:Set(true);
				AldyToiH.CFrame = (getgenv()).eventSet.platform[AldyTois2(-24639)] * CFrame[AldyTois2(-24169)](0, 3, 0);
				if AldyToiRk[AldyTois2(-24468)] then
					AldyToiRk.position = AldyToiH[AldyTois2(-24639)];
				end;
				if (getgenv()).eventSet.isAutoFishing then
					AldyToiMk:Set(true);
				end;
			elseif not AldyToic and (getgenv())[AldyTois2(-24543)][AldyTois2(-24214)] then
				(getgenv()).eventSet.isAutoFishing = AldyToiY.autoFishing;
				if (getgenv())[AldyTois2(-24543)][AldyTois2(-24421)] then
					AldyToiMk:Set(false);
				end;
				AldyToirk(false);
				AldyToiI2:Set(false);
				AldyToiH.CFrame = (getgenv())[AldyTois2(-24543)][AldyTois2(-24399)];
				if AldyToiRk[AldyTois2(-24468)] then
					AldyToiRk.position = AldyToiH.CFrame;
				end;
				if (getgenv()).eventSet[AldyTois2(-24421)] then
					task.wait(1);
					AldyToiMk:Set(true);
				end;
				(getgenv()).eventSet[AldyTois2(-24214)] = false;
			end;
		end;
	end);
end;
(getgenv()).ReplicateTextEffect = AldyToiW[AldyTois2(-24316)][AldyTois2(-24407)]["\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048"][AldyTois2(-24309)]["\082\069\047\082\101\112\108\105\099\097\116\101\084\101\120\116\069\102\102\101\099\116"];
(getgenv()).ReplicateTextEffect[AldyTois2(-24638)]:Connect(function(AldyToiq)
	if AldyToiq and (AldyToiq.TextData and AldyToiq.TextData.EffectType == "\069\120\099\108\097\105\109") then
		local AldyToic = AldyToiH.LocalPlayer.Character and AldyToiH[AldyTois2(-24646)][AldyTois2(-24465)]:FindFirstChild("\072\101\097\100");
		if AldyToic and AldyToiq[AldyTois2(-24596)] == AldyToic then
			AldyToiv = tick();
		end;
	end;
end);
if AldyToiY[AldyTois2(-24235)] then
	AldyToihk();
end;
(getgenv()).RemoteFishCaught = (game:GetService(AldyTois2(-24375)))[AldyTois2(-24316)]._Index[AldyTois2(-24240)].net["\082\069\047\079\098\116\097\105\110\101\100\078\101\119\070\105\115\104\078\111\116\105\102\105\099\097\116\105\111\110"];
(getgenv()).RemoteFishCaught.OnClientEvent:Connect(function(...)
	if not AldyToiY.fishingAnimation then
		if AldyToin == 245 then
			AldyToiKk(AldyToink, 1);
		end;
	end;
	AldyToiwk = false;
	AldyToiv = tick();
	AldyToiNk = AldyToiNk + 1;
	AldyToigk = AldyToigk + 1;
	local AldyToiq = { ... };
	for AldyToiq, AldyToiH in ipairs(AldyToiq) do
		if type(AldyToiH) == AldyTois2(-24558) and (AldyToiH.InventoryItem and AldyToiH.InventoryItem.UUID) then
			local AldyToiq = AldyToiH[AldyTois2(-24204)].UUID;
			local AldyToic = AldyToiH.InventoryItem[AldyTois2(-24192)];
			local AldyToik = AldyToiyk(AldyToic);
			if AldyToik and (AldyToik.Data[AldyTois2(-24395)] == "\070\105\115\104\101\115" and AldyToik.Probability) then
				local AldyToiH = AldyToiu.GetTierFromRarity(nil, AldyToik.Probability.Chance);
				if AldyToiH then
					if AldyToiH.Name == "\076\101\103\101\110\100\097\114\121" and AldyToix.Legendary then
						AldyToia:FireServer(AldyToiq);
					elseif AldyToiH[AldyTois2(-24642)] == AldyTois2(-24170) and AldyToix[AldyTois2(-24229)] then
						AldyToia:FireServer(AldyToiq);
					elseif AldyToiH.Name == "\083\069\067\082\069\084" and AldyToix.Secret then
						AldyToia:FireServer(AldyToiq);
					end;
				end;
			end;
		end;
		if type(AldyToiH) == AldyTois2(-24558) and (AldyToiH.InventoryItem and (AldyToiH.InventoryItem[AldyTois2(-24439)] and AldyToiH.InventoryItem[AldyTois2(-24439)][AldyTois2(-24578)])) then
			local AldyToiq = AldyToiH.InventoryItem[AldyTois2(-24617)];
			local AldyToic = AldyToiH[AldyTois2(-24204)][AldyTois2(-24439)][AldyTois2(-24578)];
			if table.find(AldyToip2, AldyToic) then
				AldyToia:FireServer(AldyToiq);
			end;
		end;
	end;
	if AldyToiY.AutoSell and AldyToiNk >= AldyToik2 then
		AldyToiNk = 0;
		AldyToibk();
	end;
	if AldyToiY[AldyTois2(-24664)] and AldyToigk >= AldyToiQ2 then
		AldyToigk = 0;
		task.wait(.8);
		AldyToiO2();
	end;
	if AldyToiY.priceValue then
		AldyToihk();
	end;
end);
(getgenv())[AldyTois2(-24435)] = hookmetamethod(game, AldyTois2(-24536), newcclosure(function(AldyToiq, ...)
		local AldyToiH = getnamecallmethod();
		if AldyToiH == "\070\105\114\101\083\101\114\118\101\114" and tostring(AldyToiq) == "\082\101\099\111\110\110\101\099\116\080\108\097\121\101\114" then
			return nil;
		end;
		return (getgenv())[AldyTois2(-24435)](AldyToiq, ...);
	end));
task.spawn(function()
	while true do
		task.wait(7);
		AldyToiDk();
		local AldyToiq = tick() - AldyToiv;
		AldyToijk();
		if AldyToiq > tonumber(AldyToiH2) and (AldyToiY[AldyTois2(-24219)] and AldyToiY[AldyTois2(-24562)]) then
			AldyToiTk();
			AldyToiv = tick();
		end;
	end;
end);
AldyToiL.CharacterAdded:Connect(function(AldyToiq)
	local AldyToiH = AldyToik.Characters:FindFirstChild(AldyToiw.Name);
	local AldyToic = game[AldyTois2(-24492)].LocalPlayer.Character:WaitForChild(AldyTois2(-24263));
	for AldyToiq, AldyToiH in pairs(AldyToiI) do
		if tostring(AldyToiH.UUID) == tostring(AldyToip) then
			AldyToin = AldyToiH.Id;
			break;
		end;
	end;
	AldyToiCk();
	local AldyToiN = AldyToiY[AldyTois2(-24219)];
	AldyToiMk:Set(AldyToiN);
	AldyToiYk(AldyToiN);
end);
AldyToiS:Load();